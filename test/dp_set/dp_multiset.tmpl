$X${
#include <dptl/dp_set.hpp>

// Testdata Check Utilities
// -----------------------------------------------------------------------------
template <typename T>
inline bool check_multiset( dp_multiset<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	rp_multiset<T> l;

	for ( auto&& a : ts ) l.emplace( a );

	return ls == reinterpret_cast<dp_multiset<T> const&>( l );
}

template <typename T>
inline bool check_multiset( rp_multiset<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	rp_multiset<T> l;

	for ( auto&& a : ts ) l.emplace( a );

	return ls == l;
}

template <typename T>
inline bool check_multiset( std::multiset<T> const& ls, std::initializer_list<T> const& ts )
{
	std::multiset<T>     l;

	for ( auto a : ts ) l.emplace( a );

	return ls == l;
}
$}

$V "constructor/assignment/destructor"
${
	// default constructor
	$a		lr;
	AssertTrue( check_multiset( lr, { } ));

	// copy constructor
	$a		p0( lr );
	const $a	c0( lr );
	lr.insert( $d$1 );
	$a		p1( lr );
	const $a	c1( lr );
	lr.insert( $d$2 );
	lr.insert( $d$3 );
	lr.insert( $d$3 );
	lr.insert( $d$3 );
	lr.insert( $d$4 );
	lr.insert( $d$5 );
	$a		p5( lr );
	const $a	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_multiset( p1, { $1 } ));
	AssertTrue( check_multiset( p5, { $1, $2, $3, $3, $3, $4, $5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_multiset( c1, { $1 } ));
	AssertTrue( check_multiset( c5, { $1, $2, $3, $3, $3, $4, $5 } ));

	// move constructor
	{
		$a   lx = lr;
		$a   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_multiset( ly, { $1, $2, $3, $3, $3, $4, $5 } ));
	}
	// copy assignment operator
	{
		$a   lx;

		lx = p1;
		AssertTrue( check_multiset( lx, { $1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_multiset( lx, { $1, $2, $3, $3, $3, $4, $5 } ));
	}
	// move assignment operator
	{
		$a   lx;

		lr = p1;
		lx = $a( { $5, $5, $2 } );		// move assignment by r-value
		AssertTrue( check_multiset( lx, { $5, $5, $2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_multiset( lx, { $1 } ));
		AssertTrue( check_multiset( lr, {} ));			// not mandatory

		lx = std::move( lx );	
		AssertTrue( check_multiset( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		$a   lx = p5;
		$a::iterator	i = lx.find( $4 );

		$a   x3( lx.begin(), i );
		AssertTrue( check_multiset( x3, { $1, $2, $3, $3, $3 } ));
		$a   x0( i, i );
		AssertTrue( x0.empty());
		$a   x1( i, lx.end());
		AssertTrue( check_multiset( x1, { $4, $5 } ));
	}
	// initializer constructor/assignment operator
	{
		$a   lx = p5;
		$a   x0 { };
		$a   x1 { $1 };
		$a   x5 { $1, $2, $3, $3, $3, $4, $5 };

		AssertTrue( x0.empty());
		AssertTrue( check_multiset( x1, { $1 } ));
		AssertTrue( check_multiset( x5, { $1, $2, $3, $3, $3, $4, $5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { $1 };
		AssertTrue( check_multiset( lx, { $1 } ));
		lx = { $1, $2, $3, $3, $3, $4, $5 };
		AssertTrue( check_multiset( lx, { $1, $2, $3, $3, $3, $4, $5 } ));
	}
$}

$V "find/lower_bound/upper_bound/equal_range"
${
	$a      s = { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2 };

	print( s );

	AssertNotEqual( s.find( $4 ), s.end());
$R${	AssertEqual( *s.find( $4 ), $4 );$}$&
$D${	AssertNotEqual( *s.find( $4 ), $4 );$}
$T${	AssertEqual( **s.find( $4 ), t4 );$}
	// **s.find( $4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( $7 ), s.end());
	// AssertEqual( *s.find( $7 ), $n );    // runtime error

	// null value
	AssertEqual( s.find( $n ), s.end());
	s.insert( $n );
	AssertNotEqual( s.find( $n ), s.end());
	AssertEqual( *s.find( $n ), $n );

	AssertTrue( check_multiset( s, { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));

$R$D${	rp_multiset<$v>		      l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;$}$&
$N${	std::multiset<$v>		      l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;$}
	$a::iterator    b, e;

	// [$4.->.$4)
	b = s.find( $4 );
	e = s.upper_bound( $4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_multiset( l1, { $4, $4, $4, $4 } ));

	// ($4.<-.$4]
	b = s.find( $4 );
	e = s.lower_bound( $4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_multiset( r1, { } ));

	// [.->.$4]
	b = s.begin();
	e = s.upper_bound( $4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_multiset( l2, { $n, $1, $1, $2, $2, $2, $3, $3, $3, $4, $4, $4, $4 } ));

	// [$4.<-.]
	b = s.find( $8 );
	e = s.lower_bound( $4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_multiset( r2, { $4, $4, $4, $5, $5, $8 } ));

	// [.->.$4)
	b = s.begin();
	e = s.upper_bound( $3 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_multiset( l3, { $n, $1, $1, $2, $2, $2, $3, $3, $3 } ));

	// ($4.<-.]
	b = s.find( $8 );
	e = s.lower_bound( $4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_multiset( r3, { $4, $4, $4, $5, $5, $8 } ));

	// [$4.->.)
	b = s.lower_bound( $4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_multiset( l4, { $4, $4, $4, $4, $5, $5, $8 } ));

	// (.<-.$4]
	b = s.upper_bound( $4 );
	e = s.find( $n );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_multiset( r4, { $1, $1, $2, $2, $2, $3, $3, $3, $4, $4, $4, $4, $5 } ));

	// ($4.->.)
	b = s.upper_bound( $4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_multiset( l5, { $5, $5, $8 } ));

	// (.<-.$4)
	b = s.lower_bound( $4 );
	e = s.find( $n );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_multiset( r5, { $1, $1, $2, $2, $2, $3, $3, $3, $4 } ));

	// lowest key
	AssertEqual( s.lower_bound( $n ), s.find( $n ));
	AssertEqual( s.upper_bound( $8 ), s.end());
$}

$V "emplace/insert/erase"
${
$R$D${	rp_multiset<$v>	m1 = { $1, $2 };
	rp_multiset<$v>	m2;
	rp_multiset<$v>	m3 = { $2, $3, $3, $3, $5 };$}$&
$N${	std::multiset<$v>	m1 = { $1, $2 };
	std::multiset<$v>	m2;
	std::multiset<$v>	m3 = { $2, $3, $3, $3, $5 };$}

	// emplace
	{
		typedef typename $a::iterator			iterator;

		$a	pm;
		$a	pi;
		iterator		r;
		iterator		j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( $D${dp_dup<$v>()( $}*i $D${)$});

			AssertEqual( *i, *r );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, $D${dp_dup<$v>()( $}*i $D${)$});

			AssertEqual( *i, *j );
		}
		AssertTrue( check_multiset( pm, { $1, $2 } ));
		AssertTrue( check_multiset( pi, { $1, $2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( $D${dp_dup<$v>()( $}*i $D${)$});

			AssertEqual( *i, *r );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, $D${dp_dup<$v>()( $}*i $D${)$});

			AssertEqual( *i, *j );
		}

		AssertTrue( check_multiset( pm, { $1, $2, $2, $3, $3, $3, $5 } ));
		AssertTrue( check_multiset( pi, { $1, $2, $2, $3, $3, $3, $5 } ));
	}

	// insert
	{
		$a     pm;
		$a     il;
		$a     it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( $D${dp_dup<$v>()( $}*i $D${)$});
		il.insert( { $1, $2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_multiset( pm, { $1, $2 } ));
		AssertTrue( check_multiset( il, { $1, $2 } ));
		AssertTrue( check_multiset( it, { $1, $2 } ));
	
		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( $D${dp_dup<$v>()( $}*i $D${)$});
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_multiset( pm, { $1, $2 } ));
		AssertTrue( check_multiset( il, { $1, $2 } ));
		AssertTrue( check_multiset( it, { $1, $2 } ));
	
		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( $D${dp_dup<$v>()( $}*i $D${)$});
		il.insert( { $2, $3, $3, $3, $5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_multiset( pm, { $1, $2, $2, $3, $3, $3, $5 } ));
		AssertTrue( check_multiset( il, { $1, $2, $2, $3, $3, $3, $5 } ));
		AssertTrue( check_multiset( it, { $1, $2, $2, $3, $3, $3, $5 } ));
	}
	
	// erase
	{
		$a	p { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2, $n };
		$a	p1( p );
	
		AssertEqual( p1.erase( $4 ), 4 );
		AssertTrue( check_multiset( p1, { $1, $2, $5, $8, $2, $3, $6, $3, $5, $1, $2, $n } ));
		AssertZero( p1.erase( $7 ));
		AssertEqual( p1.erase( $n ), 1 );
		AssertEqual( p1.erase( $5 ), 2 );
		AssertEqual( p1.erase( $8 ), 1 );
		AssertTrue( check_multiset( p1, { $1, $2, $2, $3, $6, $3, $1, $2 } ));
	
		$a	q1( p );
		$a	q2( p );
		$a	q3( p );
		$a	q4( p );
	
		q1.erase( q1.find( $3 ));
		AssertTrue( check_multiset( q1, { $1, $2, $5, $8, $4, $2, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));
		// q1.erase( q1.find( $7 ));	runtime-error
		q1.erase( q1.find( $8 ));
		AssertTrue( check_multiset( q1, { $1, $2, $5, $4, $2, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));
		q1.erase( q1.begin());
		AssertTrue( check_multiset( q1, { $1, $2, $5, $4, $2, $6, $3, $4, $5, $4, $4, $1, $2 } ));
		// q1.erase( q1.end());		runtime-error
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_multiset( q1, { } ));
		q2.erase( q2.lower_bound( $4 ), q2.upper_bound( $4 ));
		AssertTrue( check_multiset( q2, { $1, $2, $5, $8, $2, $3, $6, $3, $5, $1, $2, $n } ));
		q2.erase( q2.begin(), q2.upper_bound( $4 ));
		AssertTrue( check_multiset( q2, { $5, $5, $8 } ));
		q3.erase( q3.lower_bound( $4 ), q3.end());
		AssertTrue( check_multiset( q3, { $1, $2, $2, $3, $6, $3, $1, $2, $n } ));
		q4.erase( q4.find( $4 ), q4.find( $4 ));
		AssertTrue( check_multiset( q4, { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_multiset( q4, { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_multiset( q4, { $1, $2, $5, $8, $4, $2, $3, $6, $3, $4, $5, $4, $4, $1, $2, $n } ));
	}
$}

$V "iterator"
${
	$a	     pm = { $1, $2, $3, $3, $3, $5 };
	{
		$a::iterator   i;
		$a::const_iterator     j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = $a::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
$R${				AssertEqual( *i, $3 );$}$&
$D${				AssertNotEqual( *i, $3 );$}
$T${				AssertEqual( **i, t3 );$}$&
$Z${				AssertZero( strcmp( *i, $3 ));$}$&
$F$A${				AssertTrue( dp_eql<$v>()( *i, $3 ));$}
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 6 );
		AssertEqual( pm.find( $3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{
		$a::reverse_iterator   i;
		$a::const_reverse_iterator     j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 4 ) k = $a::reverse_iterator( i );
			if ( c == 5 ) {
				AssertNotEqual( i, pm.rend());
$R${				AssertEqual( *i, $1 );$}$&
$D${				AssertNotEqual( *i, $1 );$}
$T${				AssertEqual( **i, t1 );$}$&
$Z${				AssertZero( strcmp( *i, $1 ));$}$&
$F$A${				AssertTrue( dp_eql<$v>()( *i, $1 ));$}
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 6 );
		AssertEqual( static_cast<$a::const_reverse_iterator>( pm.find( $2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
$}

$V "miscellaneous (swap/count/size/empty/clear)"
${
	$a      r1;
	$a      r2 = { $1, $2, $3, $3, $3, $5 };
	$a      r3 = { $4, $5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_multiset( r1, { $1, $2, $3, $3, $3, $5 } ));
	AssertTrue( check_multiset( r2, { $4, $5 } ));
	AssertTrue( check_multiset( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 6 );
	AssertEqual( r1.count( $1 ), 1 );
	AssertEqual( r1.count( $3 ), 3 );
	AssertEqual( r1.count( $4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_multiset( r1, { } ));
$}

$V "relational operators"
${
	$a      r1 = { $1, $2 };
	$a      r2 = { $1, $2, $3, $3, $3, $5 };
	$a      r3 = { $1, $2, $2 };
	$a      r4 = { $1, $2, $3, $3, $3, $5 };
	$a      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
$}

