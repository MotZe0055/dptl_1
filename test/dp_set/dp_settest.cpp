//
// dp_settest.cpp test
//
//		generated by gendptest, 2018/12/21
//

#include <dptl/dp_set.hpp>
#include <dptl/utest.hpp>
#include <dptl/udata.hpp>
#include <cstring>

using namespace dptl;

// Unit Test Classes
// -----------------------------------------------------------------------------
class dp_settest : public unittest, public basic_testdata
{
	int		m_cnt;

    public:
	// --- constructor/assignment/destructor ---
	void test01();
	void test02();
	void test03();
	void test04();
	void test05();
	void test06();
	void test07();
	void test08();
	void test09();

	// --- find/lower_bound/upper_bound/equal_range ---
	void test0A();
	void test0B();
	void test0C();
	void test0D();
	void test0E();
	void test0F();
	void test10();
	void test11();
	void test12();

	// --- emplace/insert/erase ---
	void test13();
	void test14();
	void test15();
	void test16();
	void test17();
	void test18();
	void test19();
	void test1A();
	void test1B();

	// --- iterator ---
	void test1C();
	void test1D();
	void test1E();
	void test1F();
	void test20();
	void test21();
	void test22();
	void test23();
	void test24();

	// --- miscellaneous (swap/count/size/empty/clear) ---
	void test25();
	void test26();
	void test27();
	void test28();
	void test29();
	void test2A();
	void test2B();
	void test2C();
	void test2D();

	// --- relational operators ---
	void test2E();
	void test2F();
	void test30();
	void test31();
	void test32();
	void test33();
	void test34();
	void test35();
	void test36();

	dp_settest( int argc, char** argv ) : unittest( argc, argv )
	{
		m_cnt = test::getCntr();
		fprintf( stderr, "*** test::getCntr() : %d\n", m_cnt );
	}

	~dp_settest()
	{
		this->set_subtitle( "test class allocation" );
		AssertEqual( m_cnt, test::getCntr() );
		fprintf( stderr, "\n" );
	}
};

// Testdata Check Utilities
// -----------------------------------------------------------------------------
template <typename T>
inline bool check_set( dp_set<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	dr_set<T> l;

	for ( auto&& a : ts ) l.emplace( a );

	return ls == reinterpret_cast<dp_set<T> const&>( l );
}

template <typename T>
inline bool check_set( dr_set<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	dr_set<T> l;

	for ( auto&& a : ts ) l.emplace( a );

	return ls == l;
}

template <typename T>
inline bool check_set( std::set<T> const& ls, std::initializer_list<T> const& ts )
{
	std::set<T>     l;

	for ( auto a : ts ) l.emplace( a );

	return ls == l;
}

// -----------------------------------------------------------------------------
void dp_settest::test01()
{
	this->set_subtitle( "constructor/assignment/destructor - reference pointer(pointer) value" );

	// default constructor
	dr_set<test*>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dr_set<test*>		p0( lr );
	const dr_set<test*>	c0( lr );
	lr.insert( &t1 );
	dr_set<test*>		p1( lr );
	const dr_set<test*>	c1( lr );
	lr.insert( &t2 );
	lr.insert( &t3 );
	lr.insert( &t4 );
	lr.insert( &t5 );
	dr_set<test*>		p5( lr );
	const dr_set<test*>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { &t1 } ));
	AssertTrue( check_set( p5, { &t1, &t2, &t3, &t4, &t5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { &t1 } ));
	AssertTrue( check_set( c5, { &t1, &t2, &t3, &t4, &t5 } ));

	// move constructor
	{
		dr_set<test*>   lx = lr;
		dr_set<test*>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { &t1, &t2, &t3, &t4, &t5 } ));
	}
	// copy assignment operator
	{
		dr_set<test*>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { &t1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { &t1, &t2, &t3, &t4, &t5 } ));
	}
	// move assignment operator
	{
		dr_set<test*>   lx;

		lr = p1;
		lx = dr_set<test*>( { &t5, &t3, &t2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { &t5, &t3, &t2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { &t1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dr_set<test*>   lx = p5;
		dr_set<test*>::iterator	i = lx.find( &t4 );

		dr_set<test*>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { &t1, &t2, &t3 } ));
		dr_set<test*>   x0( i, i );
		AssertTrue( x0.empty());
		dr_set<test*>   x1( i, lx.end());
		AssertTrue( check_set( x1, { &t4, &t5 } ));
	}
	// initializer constructor/assignment operator
	{
		dr_set<test*>   lx = p5;
		dr_set<test*>   x0 { };
		dr_set<test*>   x1 { &t1 };
		dr_set<test*>   x5 { &t1, &t2, &t3, &t4, &t5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { &t1 } ));
		AssertTrue( check_set( x5, { &t1, &t2, &t3, &t4, &t5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { &t1 };
		AssertTrue( check_set( lx, { &t1 } ));
		lx = { &t1, &t2, &t3, &t4, &t5 };
		AssertTrue( check_set( lx, { &t1, &t2, &t3, &t4, &t5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test02()
{
	this->set_subtitle( "constructor/assignment/destructor - deep pointer(pointer) value" );

	// default constructor
	dp_set<test*>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dp_set<test*>		p0( lr );
	const dp_set<test*>	c0( lr );
	lr.insert( dpl( &t1 ) );
	dp_set<test*>		p1( lr );
	const dp_set<test*>	c1( lr );
	lr.insert( dpl( &t2 ) );
	lr.insert( dpl( &t3 ) );
	lr.insert( dpl( &t4 ) );
	lr.insert( dpl( &t5 ) );
	dp_set<test*>		p5( lr );
	const dp_set<test*>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { &t1 } ));
	AssertTrue( check_set( p5, { &t1, &t2, &t3, &t4, &t5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { &t1 } ));
	AssertTrue( check_set( c5, { &t1, &t2, &t3, &t4, &t5 } ));

	// move constructor
	{
		dp_set<test*>   lx = lr;
		dp_set<test*>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { &t1, &t2, &t3, &t4, &t5 } ));
	}
	// copy assignment operator
	{
		dp_set<test*>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { &t1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { &t1, &t2, &t3, &t4, &t5 } ));
	}
	// move assignment operator
	{
		dp_set<test*>   lx;

		lr = p1;
		lx = dp_set<test*>( { &t5, &t3, &t2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { &t5, &t3, &t2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { &t1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dp_set<test*>   lx = p5;
		dp_set<test*>::iterator	i = lx.find( &t4 );

		dp_set<test*>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { &t1, &t2, &t3 } ));
		dp_set<test*>   x0( i, i );
		AssertTrue( x0.empty());
		dp_set<test*>   x1( i, lx.end());
		AssertTrue( check_set( x1, { &t4, &t5 } ));
	}
	// initializer constructor/assignment operator
	{
		dp_set<test*>   lx = p5;
		dp_set<test*>   x0 { };
		dp_set<test*>   x1 { &t1 };
		dp_set<test*>   x5 { &t1, &t2, &t3, &t4, &t5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { &t1 } ));
		AssertTrue( check_set( x5, { &t1, &t2, &t3, &t4, &t5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { &t1 };
		AssertTrue( check_set( lx, { &t1 } ));
		lx = { &t1, &t2, &t3, &t4, &t5 };
		AssertTrue( check_set( lx, { &t1, &t2, &t3, &t4, &t5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test03()
{
	this->set_subtitle( "constructor/assignment/destructor - reference pointer(c-string) value" );

	// default constructor
	dr_set<const char[]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dr_set<const char[]>		p0( lr );
	const dr_set<const char[]>	c0( lr );
	lr.insert( s1 );
	dr_set<const char[]>		p1( lr );
	const dr_set<const char[]>	c1( lr );
	lr.insert( s2 );
	lr.insert( s3 );
	lr.insert( s4 );
	lr.insert( s5 );
	dr_set<const char[]>		p5( lr );
	const dr_set<const char[]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { s1 } ));
	AssertTrue( check_set( p5, { s1, s2, s3, s4, s5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { s1 } ));
	AssertTrue( check_set( c5, { s1, s2, s3, s4, s5 } ));

	// move constructor
	{
		dr_set<const char[]>   lx = lr;
		dr_set<const char[]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { s1, s2, s3, s4, s5 } ));
	}
	// copy assignment operator
	{
		dr_set<const char[]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { s1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { s1, s2, s3, s4, s5 } ));
	}
	// move assignment operator
	{
		dr_set<const char[]>   lx;

		lr = p1;
		lx = dr_set<const char[]>( { s5, s3, s2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { s5, s3, s2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { s1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dr_set<const char[]>   lx = p5;
		dr_set<const char[]>::iterator	i = lx.find( s4 );

		dr_set<const char[]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { s1, s2, s3 } ));
		dr_set<const char[]>   x0( i, i );
		AssertTrue( x0.empty());
		dr_set<const char[]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { s4, s5 } ));
	}
	// initializer constructor/assignment operator
	{
		dr_set<const char[]>   lx = p5;
		dr_set<const char[]>   x0 { };
		dr_set<const char[]>   x1 { s1 };
		dr_set<const char[]>   x5 { s1, s2, s3, s4, s5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { s1 } ));
		AssertTrue( check_set( x5, { s1, s2, s3, s4, s5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { s1 };
		AssertTrue( check_set( lx, { s1 } ));
		lx = { s1, s2, s3, s4, s5 };
		AssertTrue( check_set( lx, { s1, s2, s3, s4, s5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test04()
{
	this->set_subtitle( "constructor/assignment/destructor - deep pointer(c-string) value" );

	// default constructor
	dp_set<const char[]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dp_set<const char[]>		p0( lr );
	const dp_set<const char[]>	c0( lr );
	lr.insert( strdup( s1 ) );
	dp_set<const char[]>		p1( lr );
	const dp_set<const char[]>	c1( lr );
	lr.insert( strdup( s2 ) );
	lr.insert( strdup( s3 ) );
	lr.insert( strdup( s4 ) );
	lr.insert( strdup( s5 ) );
	dp_set<const char[]>		p5( lr );
	const dp_set<const char[]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { s1 } ));
	AssertTrue( check_set( p5, { s1, s2, s3, s4, s5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { s1 } ));
	AssertTrue( check_set( c5, { s1, s2, s3, s4, s5 } ));

	// move constructor
	{
		dp_set<const char[]>   lx = lr;
		dp_set<const char[]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { s1, s2, s3, s4, s5 } ));
	}
	// copy assignment operator
	{
		dp_set<const char[]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { s1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { s1, s2, s3, s4, s5 } ));
	}
	// move assignment operator
	{
		dp_set<const char[]>   lx;

		lr = p1;
		lx = dp_set<const char[]>( { s5, s3, s2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { s5, s3, s2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { s1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dp_set<const char[]>   lx = p5;
		dp_set<const char[]>::iterator	i = lx.find( s4 );

		dp_set<const char[]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { s1, s2, s3 } ));
		dp_set<const char[]>   x0( i, i );
		AssertTrue( x0.empty());
		dp_set<const char[]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { s4, s5 } ));
	}
	// initializer constructor/assignment operator
	{
		dp_set<const char[]>   lx = p5;
		dp_set<const char[]>   x0 { };
		dp_set<const char[]>   x1 { s1 };
		dp_set<const char[]>   x5 { s1, s2, s3, s4, s5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { s1 } ));
		AssertTrue( check_set( x5, { s1, s2, s3, s4, s5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { s1 };
		AssertTrue( check_set( lx, { s1 } ));
		lx = { s1, s2, s3, s4, s5 };
		AssertTrue( check_set( lx, { s1, s2, s3, s4, s5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test05()
{
	this->set_subtitle( "constructor/assignment/destructor - reference pointer(v-array) value" );

	// default constructor
	dr_set<test[]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dr_set<test[]>		p0( lr );
	const dr_set<test[]>	c0( lr );
	lr.insert( v1 );
	dr_set<test[]>		p1( lr );
	const dr_set<test[]>	c1( lr );
	lr.insert( v2 );
	lr.insert( v3 );
	lr.insert( v4 );
	lr.insert( v5 );
	dr_set<test[]>		p5( lr );
	const dr_set<test[]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { v1 } ));
	AssertTrue( check_set( p5, { v1, v2, v3, v4, v5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { v1 } ));
	AssertTrue( check_set( c5, { v1, v2, v3, v4, v5 } ));

	// move constructor
	{
		dr_set<test[]>   lx = lr;
		dr_set<test[]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { v1, v2, v3, v4, v5 } ));
	}
	// copy assignment operator
	{
		dr_set<test[]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { v1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { v1, v2, v3, v4, v5 } ));
	}
	// move assignment operator
	{
		dr_set<test[]>   lx;

		lr = p1;
		lx = dr_set<test[]>( { v5, v3, v2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { v5, v3, v2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { v1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dr_set<test[]>   lx = p5;
		dr_set<test[]>::iterator	i = lx.find( v4 );

		dr_set<test[]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { v1, v2, v3 } ));
		dr_set<test[]>   x0( i, i );
		AssertTrue( x0.empty());
		dr_set<test[]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { v4, v5 } ));
	}
	// initializer constructor/assignment operator
	{
		dr_set<test[]>   lx = p5;
		dr_set<test[]>   x0 { };
		dr_set<test[]>   x1 { v1 };
		dr_set<test[]>   x5 { v1, v2, v3, v4, v5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { v1 } ));
		AssertTrue( check_set( x5, { v1, v2, v3, v4, v5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { v1 };
		AssertTrue( check_set( lx, { v1 } ));
		lx = { v1, v2, v3, v4, v5 };
		AssertTrue( check_set( lx, { v1, v2, v3, v4, v5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test06()
{
	this->set_subtitle( "constructor/assignment/destructor - deep pointer(v-array) value" );

	// default constructor
	dp_set<test[]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dp_set<test[]>		p0( lr );
	const dp_set<test[]>	c0( lr );
	lr.insert( dpl( v1 ) );
	dp_set<test[]>		p1( lr );
	const dp_set<test[]>	c1( lr );
	lr.insert( dpl( v2 ) );
	lr.insert( dpl( v3 ) );
	lr.insert( dpl( v4 ) );
	lr.insert( dpl( v5 ) );
	dp_set<test[]>		p5( lr );
	const dp_set<test[]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { v1 } ));
	AssertTrue( check_set( p5, { v1, v2, v3, v4, v5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { v1 } ));
	AssertTrue( check_set( c5, { v1, v2, v3, v4, v5 } ));

	// move constructor
	{
		dp_set<test[]>   lx = lr;
		dp_set<test[]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { v1, v2, v3, v4, v5 } ));
	}
	// copy assignment operator
	{
		dp_set<test[]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { v1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { v1, v2, v3, v4, v5 } ));
	}
	// move assignment operator
	{
		dp_set<test[]>   lx;

		lr = p1;
		lx = dp_set<test[]>( { v5, v3, v2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { v5, v3, v2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { v1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dp_set<test[]>   lx = p5;
		dp_set<test[]>::iterator	i = lx.find( v4 );

		dp_set<test[]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { v1, v2, v3 } ));
		dp_set<test[]>   x0( i, i );
		AssertTrue( x0.empty());
		dp_set<test[]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { v4, v5 } ));
	}
	// initializer constructor/assignment operator
	{
		dp_set<test[]>   lx = p5;
		dp_set<test[]>   x0 { };
		dp_set<test[]>   x1 { v1 };
		dp_set<test[]>   x5 { v1, v2, v3, v4, v5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { v1 } ));
		AssertTrue( check_set( x5, { v1, v2, v3, v4, v5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { v1 };
		AssertTrue( check_set( lx, { v1 } ));
		lx = { v1, v2, v3, v4, v5 };
		AssertTrue( check_set( lx, { v1, v2, v3, v4, v5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test07()
{
	this->set_subtitle( "constructor/assignment/destructor - reference pointer(f-array) value" );

	// default constructor
	dr_set<test[3]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dr_set<test[3]>		p0( lr );
	const dr_set<test[3]>	c0( lr );
	lr.insert( w1 );
	dr_set<test[3]>		p1( lr );
	const dr_set<test[3]>	c1( lr );
	lr.insert( w2 );
	lr.insert( w3 );
	lr.insert( w4 );
	lr.insert( w5 );
	dr_set<test[3]>		p5( lr );
	const dr_set<test[3]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { w1 } ));
	AssertTrue( check_set( p5, { w1, w2, w3, w4, w5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { w1 } ));
	AssertTrue( check_set( c5, { w1, w2, w3, w4, w5 } ));

	// move constructor
	{
		dr_set<test[3]>   lx = lr;
		dr_set<test[3]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { w1, w2, w3, w4, w5 } ));
	}
	// copy assignment operator
	{
		dr_set<test[3]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { w1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { w1, w2, w3, w4, w5 } ));
	}
	// move assignment operator
	{
		dr_set<test[3]>   lx;

		lr = p1;
		lx = dr_set<test[3]>( { w5, w3, w2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { w5, w3, w2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { w1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dr_set<test[3]>   lx = p5;
		dr_set<test[3]>::iterator	i = lx.find( w4 );

		dr_set<test[3]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { w1, w2, w3 } ));
		dr_set<test[3]>   x0( i, i );
		AssertTrue( x0.empty());
		dr_set<test[3]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { w4, w5 } ));
	}
	// initializer constructor/assignment operator
	{
		dr_set<test[3]>   lx = p5;
		dr_set<test[3]>   x0 { };
		dr_set<test[3]>   x1 { w1 };
		dr_set<test[3]>   x5 { w1, w2, w3, w4, w5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { w1 } ));
		AssertTrue( check_set( x5, { w1, w2, w3, w4, w5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { w1 };
		AssertTrue( check_set( lx, { w1 } ));
		lx = { w1, w2, w3, w4, w5 };
		AssertTrue( check_set( lx, { w1, w2, w3, w4, w5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test08()
{
	this->set_subtitle( "constructor/assignment/destructor - deep pointer(f-array) value" );

	// default constructor
	dp_set<test[3]>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	dp_set<test[3]>		p0( lr );
	const dp_set<test[3]>	c0( lr );
	lr.insert( dpl( w1 ) );
	dp_set<test[3]>		p1( lr );
	const dp_set<test[3]>	c1( lr );
	lr.insert( dpl( w2 ) );
	lr.insert( dpl( w3 ) );
	lr.insert( dpl( w4 ) );
	lr.insert( dpl( w5 ) );
	dp_set<test[3]>		p5( lr );
	const dp_set<test[3]>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { w1 } ));
	AssertTrue( check_set( p5, { w1, w2, w3, w4, w5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { w1 } ));
	AssertTrue( check_set( c5, { w1, w2, w3, w4, w5 } ));

	// move constructor
	{
		dp_set<test[3]>   lx = lr;
		dp_set<test[3]>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { w1, w2, w3, w4, w5 } ));
	}
	// copy assignment operator
	{
		dp_set<test[3]>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { w1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { w1, w2, w3, w4, w5 } ));
	}
	// move assignment operator
	{
		dp_set<test[3]>   lx;

		lr = p1;
		lx = dp_set<test[3]>( { w5, w3, w2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { w5, w3, w2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { w1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		dp_set<test[3]>   lx = p5;
		dp_set<test[3]>::iterator	i = lx.find( w4 );

		dp_set<test[3]>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { w1, w2, w3 } ));
		dp_set<test[3]>   x0( i, i );
		AssertTrue( x0.empty());
		dp_set<test[3]>   x1( i, lx.end());
		AssertTrue( check_set( x1, { w4, w5 } ));
	}
	// initializer constructor/assignment operator
	{
		dp_set<test[3]>   lx = p5;
		dp_set<test[3]>   x0 { };
		dp_set<test[3]>   x1 { w1 };
		dp_set<test[3]>   x5 { w1, w2, w3, w4, w5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { w1 } ));
		AssertTrue( check_set( x5, { w1, w2, w3, w4, w5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { w1 };
		AssertTrue( check_set( lx, { w1 } ));
		lx = { w1, w2, w3, w4, w5 };
		AssertTrue( check_set( lx, { w1, w2, w3, w4, w5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test09()
{
	this->set_subtitle( "constructor/assignment/destructor - data(int value) value" );

	// default constructor
	std::set<int>		lr;
	AssertTrue( check_set( lr, { } ));

	// copy constructor
	std::set<int>		p0( lr );
	const std::set<int>	c0( lr );
	lr.insert( 1 );
	std::set<int>		p1( lr );
	const std::set<int>	c1( lr );
	lr.insert( 2 );
	lr.insert( 3 );
	lr.insert( 4 );
	lr.insert( 5 );
	std::set<int>		p5( lr );
	const std::set<int>	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_set( p1, { 1 } ));
	AssertTrue( check_set( p5, { 1, 2, 3, 4, 5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_set( c1, { 1 } ));
	AssertTrue( check_set( c5, { 1, 2, 3, 4, 5 } ));

	// move constructor
	{
		std::set<int>   lx = lr;
		std::set<int>   ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_set( ly, { 1, 2, 3, 4, 5 } ));
	}
	// copy assignment operator
	{
		std::set<int>   lx;

		lx = p1;
		AssertTrue( check_set( lx, { 1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_set( lx, { 1, 2, 3, 4, 5 } ));
	}
	// move assignment operator
	{
		std::set<int>   lx;

		lr = p1;
		lx = std::set<int>( { 5, 3, 2 } );		// move assignment by r-value
		AssertTrue( check_set( lx, { 5, 3, 2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_set( lx, { 1 } ));
		AssertTrue( check_set( lr, {} ));			// not mandatory

		lx = std::move( lx );
		AssertTrue( check_set( lx, {} ));			// not mandatory
	}
	// iterator constructor
	{
		std::set<int>   lx = p5;
		std::set<int>::iterator	i = lx.find( 4 );

		std::set<int>   x3( lx.begin(), i );
		AssertTrue( check_set( x3, { 1, 2, 3 } ));
		std::set<int>   x0( i, i );
		AssertTrue( x0.empty());
		std::set<int>   x1( i, lx.end());
		AssertTrue( check_set( x1, { 4, 5 } ));
	}
	// initializer constructor/assignment operator
	{
		std::set<int>   lx = p5;
		std::set<int>   x0 { };
		std::set<int>   x1 { 1 };
		std::set<int>   x5 { 1, 2, 3, 4, 5 };

		AssertTrue( x0.empty());
		AssertTrue( check_set( x1, { 1 } ));
		AssertTrue( check_set( x5, { 1, 2, 3, 4, 5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { 1 };
		AssertTrue( check_set( lx, { 1 } ));
		lx = { 1, 2, 3, 4, 5 };
		AssertTrue( check_set( lx, { 1, 2, 3, 4, 5 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test0A()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - reference pointer(pointer) value" );

	dr_set<test*>      s = { &t1, &t2, &t5, &t8, &t4, &t2, &t3, &t6, &t3, &t4, &t5, &t4, &t4, &t1, &t2 };

	print( s );

	AssertNotEqual( s.find( &t4 ), s.end());
	AssertEqual( *s.find( &t4 ), &t4 );
	AssertEqual( **s.find( &t4 ), t4 );
	// **s.find( &t4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( &t7 ), s.end());
	// AssertEqual( *s.find( &t7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, &t1, &t2, &t3, &t4, &t5, &t6, &t8 } ));

	dr_set<test*>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dr_set<test*>::iterator	b, e;

	// [&t4.->.&t4)
	b = s.find( &t4 );
	e = s.upper_bound( &t4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { &t4 } ));

	// (&t4.<-.&t4]
	b = s.find( &t4 );
	e = s.lower_bound( &t4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.&t4]
	b = s.begin();
	e = s.upper_bound( &t4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, &t1, &t2, &t3, &t4 } ));

	// [&t4.<-.]
	b = s.find( &t8 );
	e = s.lower_bound( &t4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { &t5, &t8 } ));

	// [.->.&t4)
	b = s.begin();
	e = s.find( &t4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, &t1, &t2, &t3 } ));

	// (&t4.<-.]
	b = s.find( &t8 );
	e = s.find( &t4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { &t5, &t8 } ));

	// [&t4.->.)
	b = s.find( &t4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { &t4, &t5, &t8 } ));

	// (.<-.&t4]
	b = s.find( &t4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { &t1, &t2, &t3, &t4 } ));

	// (&t4.->.)
	b = s.upper_bound( &t4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { &t5, &t8 } ));

	// (.<-.&t4)
	b = s.lower_bound( &t4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { &t1, &t2, &t3, &t4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( &t8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test0B()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - deep pointer(pointer) value" );

	dp_set<test*>      s = { &t1, &t2, &t5, &t8, &t4, &t2, &t3, &t6, &t3, &t4, &t5, &t4, &t4, &t1, &t2 };

	print( s );

	AssertNotEqual( s.find( &t4 ), s.end());
	AssertNotEqual( *s.find( &t4 ), &t4 );
	AssertEqual( **s.find( &t4 ), t4 );
	// **s.find( &t4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( &t7 ), s.end());
	// AssertEqual( *s.find( &t7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, &t1, &t2, &t3, &t4, &t5, &t8 } ));

	dr_set<test*>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dp_set<test*>::iterator	b, e;

	// [&t4.->.&t4)
	b = s.find( &t4 );
	e = s.upper_bound( &t4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { &t4 } ));

	// (&t4.<-.&t4]
	b = s.find( &t4 );
	e = s.lower_bound( &t4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.&t4]
	b = s.begin();
	e = s.upper_bound( &t4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, &t1, &t2, &t3, &t4 } ));

	// [&t4.<-.]
	b = s.find( &t8 );
	e = s.lower_bound( &t4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { &t5, &t8 } ));

	// [.->.&t4)
	b = s.begin();
	e = s.find( &t4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, &t1, &t2, &t3 } ));

	// (&t4.<-.]
	b = s.find( &t8 );
	e = s.find( &t4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { &t5, &t8 } ));

	// [&t4.->.)
	b = s.find( &t4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { &t4, &t5, &t8 } ));

	// (.<-.&t4]
	b = s.find( &t4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { &t1, &t2, &t3, &t4 } ));

	// (&t4.->.)
	b = s.upper_bound( &t4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { &t5, &t8 } ));

	// (.<-.&t4)
	b = s.lower_bound( &t4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { &t1, &t2, &t3, &t4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( &t8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test0C()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - reference pointer(c-string) value" );

	dr_set<const char[]>      s = { s1, s2, s5, s8, s4, s2, s3, s6, s3, s4, s5, s4, s4, s1, s2 };

	print( s );

	AssertNotEqual( s.find( s4 ), s.end());
	AssertEqual( *s.find( s4 ), s4 );

	// **s.find( s4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( s7 ), s.end());
	// AssertEqual( *s.find( s7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, s1, s2, s3, s4, s5, s6, s8 } ));

	dr_set<const char[]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dr_set<const char[]>::iterator	b, e;

	// [s4.->.s4)
	b = s.find( s4 );
	e = s.upper_bound( s4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { s4 } ));

	// (s4.<-.s4]
	b = s.find( s4 );
	e = s.lower_bound( s4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.s4]
	b = s.begin();
	e = s.upper_bound( s4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, s1, s2, s3, s4 } ));

	// [s4.<-.]
	b = s.find( s8 );
	e = s.lower_bound( s4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { s5, s8 } ));

	// [.->.s4)
	b = s.begin();
	e = s.find( s4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, s1, s2, s3 } ));

	// (s4.<-.]
	b = s.find( s8 );
	e = s.find( s4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { s5, s8 } ));

	// [s4.->.)
	b = s.find( s4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { s4, s5, s8 } ));

	// (.<-.s4]
	b = s.find( s4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { s1, s2, s3, s4 } ));

	// (s4.->.)
	b = s.upper_bound( s4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { s5, s8 } ));

	// (.<-.s4)
	b = s.lower_bound( s4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { s1, s2, s3, s4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( s8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test0D()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - deep pointer(c-string) value" );

	dp_set<const char[]>      s = { s1, s2, s5, s8, s4, s2, s3, s6, s3, s4, s5, s4, s4, s1, s2 };

	print( s );

	AssertNotEqual( s.find( s4 ), s.end());
	AssertNotEqual( *s.find( s4 ), s4 );

	// **s.find( s4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( s7 ), s.end());
	// AssertEqual( *s.find( s7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, s1, s2, s3, s4, s5, s8 } ));

	dr_set<const char[]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dp_set<const char[]>::iterator	b, e;

	// [s4.->.s4)
	b = s.find( s4 );
	e = s.upper_bound( s4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { s4 } ));

	// (s4.<-.s4]
	b = s.find( s4 );
	e = s.lower_bound( s4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.s4]
	b = s.begin();
	e = s.upper_bound( s4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, s1, s2, s3, s4 } ));

	// [s4.<-.]
	b = s.find( s8 );
	e = s.lower_bound( s4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { s5, s8 } ));

	// [.->.s4)
	b = s.begin();
	e = s.find( s4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, s1, s2, s3 } ));

	// (s4.<-.]
	b = s.find( s8 );
	e = s.find( s4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { s5, s8 } ));

	// [s4.->.)
	b = s.find( s4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { s4, s5, s8 } ));

	// (.<-.s4]
	b = s.find( s4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { s1, s2, s3, s4 } ));

	// (s4.->.)
	b = s.upper_bound( s4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { s5, s8 } ));

	// (.<-.s4)
	b = s.lower_bound( s4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { s1, s2, s3, s4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( s8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test0E()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - reference pointer(v-array) value" );

	dr_set<test[]>      s = { v1, v2, v5, v8, v4, v2, v3, v6, v3, v4, v5, v4, v4, v1, v2 };

	print( s );

	AssertNotEqual( s.find( v4 ), s.end());
	AssertEqual( *s.find( v4 ), v4 );

	// **s.find( v4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( v7 ), s.end());
	// AssertEqual( *s.find( v7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, v1, v2, v3, v4, v5, v6, v8 } ));

	dr_set<test[]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dr_set<test[]>::iterator	b, e;

	// [v4.->.v4)
	b = s.find( v4 );
	e = s.upper_bound( v4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { v4 } ));

	// (v4.<-.v4]
	b = s.find( v4 );
	e = s.lower_bound( v4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.v4]
	b = s.begin();
	e = s.upper_bound( v4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, v1, v2, v3, v4 } ));

	// [v4.<-.]
	b = s.find( v8 );
	e = s.lower_bound( v4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { v5, v8 } ));

	// [.->.v4)
	b = s.begin();
	e = s.find( v4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, v1, v2, v3 } ));

	// (v4.<-.]
	b = s.find( v8 );
	e = s.find( v4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { v5, v8 } ));

	// [v4.->.)
	b = s.find( v4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { v4, v5, v8 } ));

	// (.<-.v4]
	b = s.find( v4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { v1, v2, v3, v4 } ));

	// (v4.->.)
	b = s.upper_bound( v4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { v5, v8 } ));

	// (.<-.v4)
	b = s.lower_bound( v4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { v1, v2, v3, v4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( v8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test0F()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - deep pointer(v-array) value" );

	dp_set<test[]>      s = { v1, v2, v5, v8, v4, v2, v3, v6, v3, v4, v5, v4, v4, v1, v2 };

	print( s );

	AssertNotEqual( s.find( v4 ), s.end());
	AssertNotEqual( *s.find( v4 ), v4 );

	// **s.find( v4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( v7 ), s.end());
	// AssertEqual( *s.find( v7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, v1, v2, v3, v4, v5, v8 } ));

	dr_set<test[]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dp_set<test[]>::iterator	b, e;

	// [v4.->.v4)
	b = s.find( v4 );
	e = s.upper_bound( v4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { v4 } ));

	// (v4.<-.v4]
	b = s.find( v4 );
	e = s.lower_bound( v4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.v4]
	b = s.begin();
	e = s.upper_bound( v4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, v1, v2, v3, v4 } ));

	// [v4.<-.]
	b = s.find( v8 );
	e = s.lower_bound( v4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { v5, v8 } ));

	// [.->.v4)
	b = s.begin();
	e = s.find( v4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, v1, v2, v3 } ));

	// (v4.<-.]
	b = s.find( v8 );
	e = s.find( v4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { v5, v8 } ));

	// [v4.->.)
	b = s.find( v4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { v4, v5, v8 } ));

	// (.<-.v4]
	b = s.find( v4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { v1, v2, v3, v4 } ));

	// (v4.->.)
	b = s.upper_bound( v4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { v5, v8 } ));

	// (.<-.v4)
	b = s.lower_bound( v4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { v1, v2, v3, v4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( v8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test10()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - reference pointer(f-array) value" );

	dr_set<test[3]>      s = { w1, w2, w5, w8, w4, w2, w3, w6, w3, w4, w5, w4, w4, w1, w2 };

	print( s );

	AssertNotEqual( s.find( w4 ), s.end());
	AssertEqual( *s.find( w4 ), w4 );

	// **s.find( w4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( w7 ), s.end());
	// AssertEqual( *s.find( w7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, w1, w2, w3, w4, w5, w6, w8 } ));

	dr_set<test[3]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dr_set<test[3]>::iterator	b, e;

	// [w4.->.w4)
	b = s.find( w4 );
	e = s.upper_bound( w4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { w4 } ));

	// (w4.<-.w4]
	b = s.find( w4 );
	e = s.lower_bound( w4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.w4]
	b = s.begin();
	e = s.upper_bound( w4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, w1, w2, w3, w4 } ));

	// [w4.<-.]
	b = s.find( w8 );
	e = s.lower_bound( w4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { w5, w8 } ));

	// [.->.w4)
	b = s.begin();
	e = s.find( w4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, w1, w2, w3 } ));

	// (w4.<-.]
	b = s.find( w8 );
	e = s.find( w4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { w5, w8 } ));

	// [w4.->.)
	b = s.find( w4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { w4, w5, w8 } ));

	// (.<-.w4]
	b = s.find( w4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { w1, w2, w3, w4 } ));

	// (w4.->.)
	b = s.upper_bound( w4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { w5, w8 } ));

	// (.<-.w4)
	b = s.lower_bound( w4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { w1, w2, w3, w4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( w8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test11()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - deep pointer(f-array) value" );

	dp_set<test[3]>      s = { w1, w2, w5, w8, w4, w2, w3, w6, w3, w4, w5, w4, w4, w1, w2 };

	print( s );

	AssertNotEqual( s.find( w4 ), s.end());
	AssertNotEqual( *s.find( w4 ), w4 );

	// **s.find( w4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( w7 ), s.end());
	// AssertEqual( *s.find( w7 ), nullptr );    // runtime error

	// null value
	AssertEqual( s.find( nullptr ), s.end());
	s.insert( nullptr );
	AssertNotEqual( s.find( nullptr ), s.end());
	AssertEqual( *s.find( nullptr ), nullptr );

	AssertTrue( check_set( s, { nullptr, w1, w2, w3, w4, w5, w8 } ));

	dr_set<test[3]>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	dp_set<test[3]>::iterator	b, e;

	// [w4.->.w4)
	b = s.find( w4 );
	e = s.upper_bound( w4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { w4 } ));

	// (w4.<-.w4]
	b = s.find( w4 );
	e = s.lower_bound( w4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.w4]
	b = s.begin();
	e = s.upper_bound( w4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { nullptr, w1, w2, w3, w4 } ));

	// [w4.<-.]
	b = s.find( w8 );
	e = s.lower_bound( w4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { w5, w8 } ));

	// [.->.w4)
	b = s.begin();
	e = s.find( w4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { nullptr, w1, w2, w3 } ));

	// (w4.<-.]
	b = s.find( w8 );
	e = s.find( w4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { w5, w8 } ));

	// [w4.->.)
	b = s.find( w4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { w4, w5, w8 } ));

	// (.<-.w4]
	b = s.find( w4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { w1, w2, w3, w4 } ));

	// (w4.->.)
	b = s.upper_bound( w4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { w5, w8 } ));

	// (.<-.w4)
	b = s.lower_bound( w4 );
	e = s.find( nullptr );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { w1, w2, w3, w4 } ));

	// lowest key
	AssertEqual( s.lower_bound( nullptr ), s.find( nullptr ));
	AssertEqual( s.upper_bound( w8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test12()
{
	this->set_subtitle( "find/lower_bound/upper_bound/equal_range - data(int value) value" );

	std::set<int>      s = { 1, 2, 5, 8, 4, 2, 3, 3, 3, 4, 5, 4, 4, 1, 2 };

	print( s );

	AssertNotEqual( s.find( 4 ), s.end());


	// **s.find( 4 ) = t5;		 // compile error, the value is the key of binary search-tree

	AssertEqual( s.find( 7 ), s.end());
	// AssertEqual( *s.find( 7 ), 0 );    // runtime error

	// null value
	AssertEqual( s.find( 0 ), s.end());
	s.insert( 0 );
	AssertNotEqual( s.find( 0 ), s.end());
	AssertEqual( *s.find( 0 ), 0 );

	AssertTrue( check_set( s, { 0, 1, 2, 3, 4, 5, 8 } ));

	std::set<int>			l1, r1, l2, r2, l3, r3, l4, r4, l5, r5;
	std::set<int>::iterator	b, e;

	// [4.->.4)
	b = s.find( 4 );
	e = s.upper_bound( 4 );
	for ( auto i = b; i != e; ++i ) l1.insert( *i );
	AssertTrue( check_set( l1, { 4 } ));

	// (4.<-.4]
	b = s.find( 4 );
	e = s.lower_bound( 4 );
	for ( auto i = b; i != e; --i ) r1.insert( *i );
	AssertTrue( check_set( r1, { } ));

	// [.->.4]
	b = s.begin();
	e = s.upper_bound( 4 );
	for ( auto i = b; i != e; ++i ) l2.insert( *i );
	AssertTrue( check_set( l2, { 0, 1, 2, 3, 4 } ));

	// [4.<-.]
	b = s.find( 8 );
	e = s.lower_bound( 4 );
	for ( auto i = b; i != e; --i ) r2.insert( *i );
	AssertTrue( check_set( r2, { 5, 8 } ));

	// [.->.4)
	b = s.begin();
	e = s.find( 4 );
	for ( auto i = b; i != e; ++i ) l3.insert( *i );
	AssertTrue( check_set( l3, { 0, 1, 2, 3 } ));

	// (4.<-.]
	b = s.find( 8 );
	e = s.find( 4 );
	for ( auto i = b; i != e; --i ) r3.insert( *i );
	AssertTrue( check_set( r3, { 5, 8 } ));

	// [4.->.)
	b = s.find( 4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l4.insert( *i );
	AssertTrue( check_set( l4, { 4, 5, 8 } ));

	// (.<-.4]
	b = s.find( 4 );
	e = s.find( 0 );
	for ( auto i = b; i != e; --i ) r4.insert( *i );
	AssertTrue( check_set( r4, { 1, 2, 3, 4 } ));

	// (4.->.)
	b = s.upper_bound( 4 );
	e = s.end();
	for ( auto i = b; i != e; ++i ) l5.insert( *i );
	AssertTrue( check_set( l5, { 5, 8 } ));

	// (.<-.4)
	b = s.lower_bound( 4 );
	e = s.find( 0 );
	for ( auto i = b; i != e; --i ) r5.insert( *i );
	AssertTrue( check_set( r5, { 1, 2, 3, 4 } ));

	// lowest key
	AssertEqual( s.lower_bound( 0 ), s.find( 0 ));
	AssertEqual( s.upper_bound( 8 ), s.end());
}

// -----------------------------------------------------------------------------
void dp_settest::test13()
{
	this->set_subtitle( "emplace/insert/erase - reference pointer(pointer) value" );

	dr_set<test*>	m1 = { &t1, &t2 };
	dr_set<test*>	m2;
	dr_set<test*>	m3 = { &t2, &t3, &t5 };

	// emplace
	{
		typedef std::pair<typename dr_set<test*>::iterator,bool>	pair;
		typedef typename dr_set<test*>::iterator			iterator;

		dr_set<test*>	pm;
		dr_set<test*>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( pi, { &t1, &t2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test*>()( *i, &t1 ) || dp_eql<test*>()( *i, &t2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( pi, { &t1, &t2, &t3, &t5 } ));
	}

	// insert
	{
		dr_set<test*>	pm;
		dr_set<test*>	il;
		dr_set<test*>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( *i );
		il.insert( { &t1, &t2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( il, { &t1, &t2 } ));
		AssertTrue( check_set( it, { &t1, &t2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( *i );
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( il, { &t1, &t2 } ));
		AssertTrue( check_set( it, { &t1, &t2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( *i );
		il.insert( { &t2, &t3, &t3, &t3, &t5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( il, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( it, { &t1, &t2, &t3, &t5 } ));
	}

	// erase
	{
		dr_set<test*>	p { &t1, &t2, &t5, &t8, &t4, &t3, nullptr };
		dr_set<test*>	p1( p );

		AssertEqual( p1.erase( &t4 ), 1 );
		AssertTrue( check_set( p1, { &t1, &t2, &t5, &t8, &t3, nullptr } ));
		AssertZero( p1.erase( &t7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( &t8 ), 1 );
		AssertTrue( check_set( p1, { &t1, &t2, &t5, &t3 } ));

		dr_set<test*>	q1( p );
		dr_set<test*>	q2( p );
		dr_set<test*>	q3( p );
		dr_set<test*>	q4( p );

		q1.erase( q1.find( &t4 ), q1.upper_bound( &t4 ));
		AssertTrue( check_set( q1, { &t1, &t2, &t5, &t8, &t3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( &t4 ));
		AssertTrue( check_set( q2, { &t5, &t8 } ));
		q3.erase( q3.find( &t4 ), q3.end());
		AssertTrue( check_set( q3, { &t1, &t2, &t3, nullptr } ));
		q4.erase( q4.find( &t4 ), q4.find( &t4 ));
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test14()
{
	this->set_subtitle( "emplace/insert/erase - deep pointer(pointer) value" );

	dr_set<test*>	m1 = { &t1, &t2 };
	dr_set<test*>	m2;
	dr_set<test*>	m3 = { &t2, &t3, &t5 };

	// emplace
	{
		typedef std::pair<typename dp_set<test*>::iterator,bool>	pair;
		typedef typename dp_set<test*>::iterator			iterator;

		dp_set<test*>	pm;
		dp_set<test*>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( dp_dup<test*>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test*>()( *i ));

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( pi, { &t1, &t2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( dp_dup<test*>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test*>()( *i, &t1 ) || dp_eql<test*>()( *i, &t2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test*>()( *i ));

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( pi, { &t1, &t2, &t3, &t5 } ));
	}

	// insert
	{
		dp_set<test*>	pm;
		dp_set<test*>	il;
		dp_set<test*>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( dp_dup<test*>()( *i ));
		il.insert( { &t1, &t2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( il, { &t1, &t2 } ));
		AssertTrue( check_set( it, { &t1, &t2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( dp_dup<test*>()( *i ));
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { &t1, &t2 } ));
		AssertTrue( check_set( il, { &t1, &t2 } ));
		AssertTrue( check_set( it, { &t1, &t2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( dp_dup<test*>()( *i ));
		il.insert( { &t2, &t3, &t3, &t3, &t5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( il, { &t1, &t2, &t3, &t5 } ));
		AssertTrue( check_set( it, { &t1, &t2, &t3, &t5 } ));
	}

	// erase
	{
		dp_set<test*>	p { &t1, &t2, &t5, &t8, &t4, &t3, nullptr };
		dp_set<test*>	p1( p );

		AssertEqual( p1.erase( &t4 ), 1 );
		AssertTrue( check_set( p1, { &t1, &t2, &t5, &t8, &t3, nullptr } ));
		AssertZero( p1.erase( &t7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( &t8 ), 1 );
		AssertTrue( check_set( p1, { &t1, &t2, &t5, &t3 } ));

		dp_set<test*>	q1( p );
		dp_set<test*>	q2( p );
		dp_set<test*>	q3( p );
		dp_set<test*>	q4( p );

		q1.erase( q1.find( &t4 ), q1.upper_bound( &t4 ));
		AssertTrue( check_set( q1, { &t1, &t2, &t5, &t8, &t3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( &t4 ));
		AssertTrue( check_set( q2, { &t5, &t8 } ));
		q3.erase( q3.find( &t4 ), q3.end());
		AssertTrue( check_set( q3, { &t1, &t2, &t3, nullptr } ));
		q4.erase( q4.find( &t4 ), q4.find( &t4 ));
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { &t1, &t2, &t5, &t8, &t4, &t3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test15()
{
	this->set_subtitle( "emplace/insert/erase - reference pointer(c-string) value" );

	dr_set<const char[]>	m1 = { s1, s2 };
	dr_set<const char[]>	m2;
	dr_set<const char[]>	m3 = { s2, s3, s5 };

	// emplace
	{
		typedef std::pair<typename dr_set<const char[]>::iterator,bool>	pair;
		typedef typename dr_set<const char[]>::iterator			iterator;

		dr_set<const char[]>	pm;
		dr_set<const char[]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( pi, { s1, s2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<const char[]>()( *i, s1 ) || dp_eql<const char[]>()( *i, s2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( pi, { s1, s2, s3, s5 } ));
	}

	// insert
	{
		dr_set<const char[]>	pm;
		dr_set<const char[]>	il;
		dr_set<const char[]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( *i );
		il.insert( { s1, s2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( il, { s1, s2 } ));
		AssertTrue( check_set( it, { s1, s2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( *i );
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( il, { s1, s2 } ));
		AssertTrue( check_set( it, { s1, s2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( *i );
		il.insert( { s2, s3, s3, s3, s5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( il, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( it, { s1, s2, s3, s5 } ));
	}

	// erase
	{
		dr_set<const char[]>	p { s1, s2, s5, s8, s4, s3, nullptr };
		dr_set<const char[]>	p1( p );

		AssertEqual( p1.erase( s4 ), 1 );
		AssertTrue( check_set( p1, { s1, s2, s5, s8, s3, nullptr } ));
		AssertZero( p1.erase( s7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( s8 ), 1 );
		AssertTrue( check_set( p1, { s1, s2, s5, s3 } ));

		dr_set<const char[]>	q1( p );
		dr_set<const char[]>	q2( p );
		dr_set<const char[]>	q3( p );
		dr_set<const char[]>	q4( p );

		q1.erase( q1.find( s4 ), q1.upper_bound( s4 ));
		AssertTrue( check_set( q1, { s1, s2, s5, s8, s3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( s4 ));
		AssertTrue( check_set( q2, { s5, s8 } ));
		q3.erase( q3.find( s4 ), q3.end());
		AssertTrue( check_set( q3, { s1, s2, s3, nullptr } ));
		q4.erase( q4.find( s4 ), q4.find( s4 ));
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test16()
{
	this->set_subtitle( "emplace/insert/erase - deep pointer(c-string) value" );

	dr_set<const char[]>	m1 = { s1, s2 };
	dr_set<const char[]>	m2;
	dr_set<const char[]>	m3 = { s2, s3, s5 };

	// emplace
	{
		typedef std::pair<typename dp_set<const char[]>::iterator,bool>	pair;
		typedef typename dp_set<const char[]>::iterator			iterator;

		dp_set<const char[]>	pm;
		dp_set<const char[]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( dp_dup<const char[]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<const char[]>()( *i ));

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( pi, { s1, s2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( dp_dup<const char[]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<const char[]>()( *i, s1 ) || dp_eql<const char[]>()( *i, s2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<const char[]>()( *i ));

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( pi, { s1, s2, s3, s5 } ));
	}

	// insert
	{
		dp_set<const char[]>	pm;
		dp_set<const char[]>	il;
		dp_set<const char[]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( dp_dup<const char[]>()( *i ));
		il.insert( { s1, s2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( il, { s1, s2 } ));
		AssertTrue( check_set( it, { s1, s2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( dp_dup<const char[]>()( *i ));
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { s1, s2 } ));
		AssertTrue( check_set( il, { s1, s2 } ));
		AssertTrue( check_set( it, { s1, s2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( dp_dup<const char[]>()( *i ));
		il.insert( { s2, s3, s3, s3, s5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( il, { s1, s2, s3, s5 } ));
		AssertTrue( check_set( it, { s1, s2, s3, s5 } ));
	}

	// erase
	{
		dp_set<const char[]>	p { s1, s2, s5, s8, s4, s3, nullptr };
		dp_set<const char[]>	p1( p );

		AssertEqual( p1.erase( s4 ), 1 );
		AssertTrue( check_set( p1, { s1, s2, s5, s8, s3, nullptr } ));
		AssertZero( p1.erase( s7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( s8 ), 1 );
		AssertTrue( check_set( p1, { s1, s2, s5, s3 } ));

		dp_set<const char[]>	q1( p );
		dp_set<const char[]>	q2( p );
		dp_set<const char[]>	q3( p );
		dp_set<const char[]>	q4( p );

		q1.erase( q1.find( s4 ), q1.upper_bound( s4 ));
		AssertTrue( check_set( q1, { s1, s2, s5, s8, s3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( s4 ));
		AssertTrue( check_set( q2, { s5, s8 } ));
		q3.erase( q3.find( s4 ), q3.end());
		AssertTrue( check_set( q3, { s1, s2, s3, nullptr } ));
		q4.erase( q4.find( s4 ), q4.find( s4 ));
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { s1, s2, s5, s8, s4, s3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test17()
{
	this->set_subtitle( "emplace/insert/erase - reference pointer(v-array) value" );

	dr_set<test[]>	m1 = { v1, v2 };
	dr_set<test[]>	m2;
	dr_set<test[]>	m3 = { v2, v3, v5 };

	// emplace
	{
		typedef std::pair<typename dr_set<test[]>::iterator,bool>	pair;
		typedef typename dr_set<test[]>::iterator			iterator;

		dr_set<test[]>	pm;
		dr_set<test[]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( pi, { v1, v2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test[]>()( *i, v1 ) || dp_eql<test[]>()( *i, v2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( pi, { v1, v2, v3, v5 } ));
	}

	// insert
	{
		dr_set<test[]>	pm;
		dr_set<test[]>	il;
		dr_set<test[]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( *i );
		il.insert( { v1, v2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( il, { v1, v2 } ));
		AssertTrue( check_set( it, { v1, v2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( *i );
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( il, { v1, v2 } ));
		AssertTrue( check_set( it, { v1, v2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( *i );
		il.insert( { v2, v3, v3, v3, v5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( il, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( it, { v1, v2, v3, v5 } ));
	}

	// erase
	{
		dr_set<test[]>	p { v1, v2, v5, v8, v4, v3, nullptr };
		dr_set<test[]>	p1( p );

		AssertEqual( p1.erase( v4 ), 1 );
		AssertTrue( check_set( p1, { v1, v2, v5, v8, v3, nullptr } ));
		AssertZero( p1.erase( v7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( v8 ), 1 );
		AssertTrue( check_set( p1, { v1, v2, v5, v3 } ));

		dr_set<test[]>	q1( p );
		dr_set<test[]>	q2( p );
		dr_set<test[]>	q3( p );
		dr_set<test[]>	q4( p );

		q1.erase( q1.find( v4 ), q1.upper_bound( v4 ));
		AssertTrue( check_set( q1, { v1, v2, v5, v8, v3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( v4 ));
		AssertTrue( check_set( q2, { v5, v8 } ));
		q3.erase( q3.find( v4 ), q3.end());
		AssertTrue( check_set( q3, { v1, v2, v3, nullptr } ));
		q4.erase( q4.find( v4 ), q4.find( v4 ));
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test18()
{
	this->set_subtitle( "emplace/insert/erase - deep pointer(v-array) value" );

	dr_set<test[]>	m1 = { v1, v2 };
	dr_set<test[]>	m2;
	dr_set<test[]>	m3 = { v2, v3, v5 };

	// emplace
	{
		typedef std::pair<typename dp_set<test[]>::iterator,bool>	pair;
		typedef typename dp_set<test[]>::iterator			iterator;

		dp_set<test[]>	pm;
		dp_set<test[]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( dp_dup<test[]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test[]>()( *i ));

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( pi, { v1, v2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( dp_dup<test[]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test[]>()( *i, v1 ) || dp_eql<test[]>()( *i, v2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test[]>()( *i ));

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( pi, { v1, v2, v3, v5 } ));
	}

	// insert
	{
		dp_set<test[]>	pm;
		dp_set<test[]>	il;
		dp_set<test[]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( dp_dup<test[]>()( *i ));
		il.insert( { v1, v2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( il, { v1, v2 } ));
		AssertTrue( check_set( it, { v1, v2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( dp_dup<test[]>()( *i ));
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { v1, v2 } ));
		AssertTrue( check_set( il, { v1, v2 } ));
		AssertTrue( check_set( it, { v1, v2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( dp_dup<test[]>()( *i ));
		il.insert( { v2, v3, v3, v3, v5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( il, { v1, v2, v3, v5 } ));
		AssertTrue( check_set( it, { v1, v2, v3, v5 } ));
	}

	// erase
	{
		dp_set<test[]>	p { v1, v2, v5, v8, v4, v3, nullptr };
		dp_set<test[]>	p1( p );

		AssertEqual( p1.erase( v4 ), 1 );
		AssertTrue( check_set( p1, { v1, v2, v5, v8, v3, nullptr } ));
		AssertZero( p1.erase( v7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( v8 ), 1 );
		AssertTrue( check_set( p1, { v1, v2, v5, v3 } ));

		dp_set<test[]>	q1( p );
		dp_set<test[]>	q2( p );
		dp_set<test[]>	q3( p );
		dp_set<test[]>	q4( p );

		q1.erase( q1.find( v4 ), q1.upper_bound( v4 ));
		AssertTrue( check_set( q1, { v1, v2, v5, v8, v3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( v4 ));
		AssertTrue( check_set( q2, { v5, v8 } ));
		q3.erase( q3.find( v4 ), q3.end());
		AssertTrue( check_set( q3, { v1, v2, v3, nullptr } ));
		q4.erase( q4.find( v4 ), q4.find( v4 ));
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { v1, v2, v5, v8, v4, v3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test19()
{
	this->set_subtitle( "emplace/insert/erase - reference pointer(f-array) value" );

	dr_set<test[3]>	m1 = { w1, w2 };
	dr_set<test[3]>	m2;
	dr_set<test[3]>	m3 = { w2, w3, w5 };

	// emplace
	{
		typedef std::pair<typename dr_set<test[3]>::iterator,bool>	pair;
		typedef typename dr_set<test[3]>::iterator			iterator;

		dr_set<test[3]>	pm;
		dr_set<test[3]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( pi, { w1, w2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test[3]>()( *i, w1 ) || dp_eql<test[3]>()( *i, w2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( pi, { w1, w2, w3, w5 } ));
	}

	// insert
	{
		dr_set<test[3]>	pm;
		dr_set<test[3]>	il;
		dr_set<test[3]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( *i );
		il.insert( { w1, w2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( il, { w1, w2 } ));
		AssertTrue( check_set( it, { w1, w2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( *i );
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( il, { w1, w2 } ));
		AssertTrue( check_set( it, { w1, w2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( *i );
		il.insert( { w2, w3, w3, w3, w5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( il, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( it, { w1, w2, w3, w5 } ));
	}

	// erase
	{
		dr_set<test[3]>	p { w1, w2, w5, w8, w4, w3, nullptr };
		dr_set<test[3]>	p1( p );

		AssertEqual( p1.erase( w4 ), 1 );
		AssertTrue( check_set( p1, { w1, w2, w5, w8, w3, nullptr } ));
		AssertZero( p1.erase( w7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( w8 ), 1 );
		AssertTrue( check_set( p1, { w1, w2, w5, w3 } ));

		dr_set<test[3]>	q1( p );
		dr_set<test[3]>	q2( p );
		dr_set<test[3]>	q3( p );
		dr_set<test[3]>	q4( p );

		q1.erase( q1.find( w4 ), q1.upper_bound( w4 ));
		AssertTrue( check_set( q1, { w1, w2, w5, w8, w3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( w4 ));
		AssertTrue( check_set( q2, { w5, w8 } ));
		q3.erase( q3.find( w4 ), q3.end());
		AssertTrue( check_set( q3, { w1, w2, w3, nullptr } ));
		q4.erase( q4.find( w4 ), q4.find( w4 ));
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1A()
{
	this->set_subtitle( "emplace/insert/erase - deep pointer(f-array) value" );

	dr_set<test[3]>	m1 = { w1, w2 };
	dr_set<test[3]>	m2;
	dr_set<test[3]>	m3 = { w2, w3, w5 };

	// emplace
	{
		typedef std::pair<typename dp_set<test[3]>::iterator,bool>	pair;
		typedef typename dp_set<test[3]>::iterator			iterator;

		dp_set<test[3]>	pm;
		dp_set<test[3]>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( dp_dup<test[3]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test[3]>()( *i ));

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( pi, { w1, w2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( dp_dup<test[3]>()( *i ));

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<test[3]>()( *i, w1 ) || dp_eql<test[3]>()( *i, w2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, dp_dup<test[3]>()( *i ));

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( pi, { w1, w2, w3, w5 } ));
	}

	// insert
	{
		dp_set<test[3]>	pm;
		dp_set<test[3]>	il;
		dp_set<test[3]>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( dp_dup<test[3]>()( *i ));
		il.insert( { w1, w2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( il, { w1, w2 } ));
		AssertTrue( check_set( it, { w1, w2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( dp_dup<test[3]>()( *i ));
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { w1, w2 } ));
		AssertTrue( check_set( il, { w1, w2 } ));
		AssertTrue( check_set( it, { w1, w2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( dp_dup<test[3]>()( *i ));
		il.insert( { w2, w3, w3, w3, w5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( il, { w1, w2, w3, w5 } ));
		AssertTrue( check_set( it, { w1, w2, w3, w5 } ));
	}

	// erase
	{
		dp_set<test[3]>	p { w1, w2, w5, w8, w4, w3, nullptr };
		dp_set<test[3]>	p1( p );

		AssertEqual( p1.erase( w4 ), 1 );
		AssertTrue( check_set( p1, { w1, w2, w5, w8, w3, nullptr } ));
		AssertZero( p1.erase( w7 ));
		AssertEqual( p1.erase( nullptr ), 1 );
		AssertEqual( p1.erase( w8 ), 1 );
		AssertTrue( check_set( p1, { w1, w2, w5, w3 } ));

		dp_set<test[3]>	q1( p );
		dp_set<test[3]>	q2( p );
		dp_set<test[3]>	q3( p );
		dp_set<test[3]>	q4( p );

		q1.erase( q1.find( w4 ), q1.upper_bound( w4 ));
		AssertTrue( check_set( q1, { w1, w2, w5, w8, w3, nullptr } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( w4 ));
		AssertTrue( check_set( q2, { w5, w8 } ));
		q3.erase( q3.find( w4 ), q3.end());
		AssertTrue( check_set( q3, { w1, w2, w3, nullptr } ));
		q4.erase( q4.find( w4 ), q4.find( w4 ));
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { w1, w2, w5, w8, w4, w3, nullptr } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1B()
{
	this->set_subtitle( "emplace/insert/erase - data(int value) value" );

	std::set<int>	m1 = { 1, 2 };
	std::set<int>	m2;
	std::set<int>	m3 = { 2, 3, 5 };

	// emplace
	{
		typedef std::pair<typename std::set<int>::iterator,bool>	pair;
		typedef typename std::set<int>::iterator			iterator;

		std::set<int>	pm;
		std::set<int>	pi;
		pair		r;
		iterator	j = pi.begin();

		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue( r.second );
		}
		for ( auto i = m1.begin(); i != m1.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}
		AssertTrue( check_set( pm, { 1, 2 } ));
		AssertTrue( check_set( pi, { 1, 2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			r = pm.emplace( *i );

			AssertEqual( *i, *r.first );
			AssertTrue(( dp_eql<int>()( *i, 1 ) || dp_eql<int>()( *i, 2 )) ? !r.second : r.second );
		}
		for ( auto i = m3.begin(); i != m3.end(); ++i ) {
			j = pi.emplace_hint( j, *i );

			AssertEqual( *i, *j );
		}

		AssertTrue( check_set( pm, { 1, 2, 3, 5 } ));
		AssertTrue( check_set( pi, { 1, 2, 3, 5 } ));
	}

	// insert
	{
		std::set<int>	pm;
		std::set<int>	il;
		std::set<int>	it;

		for ( auto i = m1.begin(); i != m1.end(); ++i ) pm.insert( *i );
		il.insert( { 1, 2 } );
		it.insert( m1.begin(), m1.end());
		AssertTrue( check_set( pm, { 1, 2 } ));
		AssertTrue( check_set( il, { 1, 2 } ));
		AssertTrue( check_set( it, { 1, 2 } ));

		for ( auto i = m2.begin(); i != m2.end(); ++i ) pm.insert( *i );
		il.insert( { } );
		it.insert( m2.begin(), m2.end());
		AssertTrue( check_set( pm, { 1, 2 } ));
		AssertTrue( check_set( il, { 1, 2 } ));
		AssertTrue( check_set( it, { 1, 2 } ));

		for ( auto i = m3.begin(); i != m3.end(); ++i ) pm.insert( *i );
		il.insert( { 2, 3, 3, 3, 5 } );
		it.insert( m3.begin(), m3.end());
		AssertTrue( check_set( pm, { 1, 2, 3, 5 } ));
		AssertTrue( check_set( il, { 1, 2, 3, 5 } ));
		AssertTrue( check_set( it, { 1, 2, 3, 5 } ));
	}

	// erase
	{
		std::set<int>	p { 1, 2, 5, 8, 4, 3, 0 };
		std::set<int>	p1( p );

		AssertEqual( p1.erase( 4 ), 1 );
		AssertTrue( check_set( p1, { 1, 2, 5, 8, 3, 0 } ));
		AssertZero( p1.erase( 7 ));
		AssertEqual( p1.erase( 0 ), 1 );
		AssertEqual( p1.erase( 8 ), 1 );
		AssertTrue( check_set( p1, { 1, 2, 5, 3 } ));

		std::set<int>	q1( p );
		std::set<int>	q2( p );
		std::set<int>	q3( p );
		std::set<int>	q4( p );

		q1.erase( q1.find( 4 ), q1.upper_bound( 4 ));
		AssertTrue( check_set( q1, { 1, 2, 5, 8, 3, 0 } ));
		q1.erase( q1.begin(), q1.end());
		AssertTrue( check_set( q1, { } ));
		q2.erase( q2.begin(), q2.upper_bound( 4 ));
		AssertTrue( check_set( q2, { 5, 8 } ));
		q3.erase( q3.find( 4 ), q3.end());
		AssertTrue( check_set( q3, { 1, 2, 3, 0 } ));
		q4.erase( q4.find( 4 ), q4.find( 4 ));
		AssertTrue( check_set( q4, { 1, 2, 5, 8, 4, 3, 0 } ));
		q4.erase( q4.begin(), q4.begin());
		AssertTrue( check_set( q4, { 1, 2, 5, 8, 4, 3, 0 } ));
		q4.erase( q4.end(), q4.end());
		AssertTrue( check_set( q4, { 1, 2, 5, 8, 4, 3, 0 } ));
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1C()
{
	this->set_subtitle( "iterator - reference pointer(pointer) value" );

	dr_set<test*>	pm = { &t1, &t2, &t3, &t5 }; 
	{
		dr_set<test*>::iterator		i;
		dr_set<test*>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dr_set<test*>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertEqual( *i, &t3 );
				AssertEqual( **i, t3 );
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( &t3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dr_set<test*>::reverse_iterator		i;
		dr_set<test*>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dr_set<test*>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
	  			AssertEqual( *i, &t1 );
				AssertEqual( **i, t1 );
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dr_set<test*>::const_reverse_iterator>( pm.find( &t2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1D()
{
	this->set_subtitle( "iterator - deep pointer(pointer) value" );

	dp_set<test*>	pm = { &t1, &t2, &t3, &t5 }; 
	{
		dp_set<test*>::iterator		i;
		dp_set<test*>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dp_set<test*>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertNotEqual( *i, &t3 );
				AssertEqual( **i, t3 );
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( &t3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dp_set<test*>::reverse_iterator		i;
		dp_set<test*>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dp_set<test*>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
				AssertNotEqual( *i, &t1 );
				AssertEqual( **i, t1 );
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dp_set<test*>::const_reverse_iterator>( pm.find( &t2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1E()
{
	this->set_subtitle( "iterator - reference pointer(c-string) value" );

	dr_set<const char[]>	pm = { s1, s2, s3, s5 }; 
	{
		dr_set<const char[]>::iterator		i;
		dr_set<const char[]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dr_set<const char[]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertEqual( *i, s3 );
				AssertZero( strcmp( *i, s3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( s3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dr_set<const char[]>::reverse_iterator		i;
		dr_set<const char[]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dr_set<const char[]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
	  			AssertEqual( *i, s1 );
				AssertZero( strcmp( *i, s1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dr_set<const char[]>::const_reverse_iterator>( pm.find( s2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test1F()
{
	this->set_subtitle( "iterator - deep pointer(c-string) value" );

	dp_set<const char[]>	pm = { s1, s2, s3, s5 }; 
	{
		dp_set<const char[]>::iterator		i;
		dp_set<const char[]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dp_set<const char[]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertNotEqual( *i, s3 );
				AssertZero( strcmp( *i, s3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( s3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dp_set<const char[]>::reverse_iterator		i;
		dp_set<const char[]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dp_set<const char[]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
				AssertNotEqual( *i, s1 );
				AssertZero( strcmp( *i, s1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dp_set<const char[]>::const_reverse_iterator>( pm.find( s2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test20()
{
	this->set_subtitle( "iterator - reference pointer(v-array) value" );

	dr_set<test[]>	pm = { v1, v2, v3, v5 }; 
	{
		dr_set<test[]>::iterator		i;
		dr_set<test[]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dr_set<test[]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertEqual( *i, v3 );
				AssertZero( dp_cmp<test[]>()( *i, v3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( v3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dr_set<test[]>::reverse_iterator		i;
		dr_set<test[]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dr_set<test[]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
	  			AssertEqual( *i, v1 );
				AssertZero( dp_cmp<test[]>()( *i, v1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dr_set<test[]>::const_reverse_iterator>( pm.find( v2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test21()
{
	this->set_subtitle( "iterator - deep pointer(v-array) value" );

	dp_set<test[]>	pm = { v1, v2, v3, v5 }; 
	{
		dp_set<test[]>::iterator		i;
		dp_set<test[]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dp_set<test[]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertNotEqual( *i, v3 );
				AssertZero( dp_cmp<test[]>()( *i, v3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( v3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dp_set<test[]>::reverse_iterator		i;
		dp_set<test[]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dp_set<test[]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
				AssertNotEqual( *i, v1 );
				AssertZero( dp_cmp<test[]>()( *i, v1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dp_set<test[]>::const_reverse_iterator>( pm.find( v2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test22()
{
	this->set_subtitle( "iterator - reference pointer(f-array) value" );

	dr_set<test[3]>	pm = { w1, w2, w3, w5 }; 
	{
		dr_set<test[3]>::iterator		i;
		dr_set<test[3]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dr_set<test[3]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertEqual( *i, w3 );
				AssertZero( dp_cmp<test[3]>()( *i, w3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( w3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dr_set<test[3]>::reverse_iterator		i;
		dr_set<test[3]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dr_set<test[3]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
	  			AssertEqual( *i, w1 );
				AssertZero( dp_cmp<test[3]>()( *i, w1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dr_set<test[3]>::const_reverse_iterator>( pm.find( w2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test23()
{
	this->set_subtitle( "iterator - deep pointer(f-array) value" );

	dp_set<test[3]>	pm = { w1, w2, w3, w5 }; 
	{
		dp_set<test[3]>::iterator		i;
		dp_set<test[3]>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = dp_set<test[3]>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());
				AssertNotEqual( *i, w3 );
				AssertZero( dp_cmp<test[3]>()( *i, w3 ));
				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( w3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		dp_set<test[3]>::reverse_iterator		i;
		dp_set<test[3]>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = dp_set<test[3]>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());
				AssertNotEqual( *i, w1 );
				AssertZero( dp_cmp<test[3]>()( *i, w1 ));
				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<dp_set<test[3]>::const_reverse_iterator>( pm.find( w2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test24()
{
	this->set_subtitle( "iterator - data(int value) value" );

	std::set<int>	pm = { 1, 2, 3, 5 }; 
	{
		std::set<int>::iterator		i;
		std::set<int>::const_iterator	j, k;
		unsigned			c;

		for ( i = pm.begin(), c = 0; i != pm.end(); ++i, ++c ) {
			if ( c == 1 ) k = std::set<int>::iterator( i );
			if ( c == 2 ) {
				AssertNotEqual( i, pm.end());


				j = i;
			}
		}
		AssertEqual( i, pm.end());
		AssertEqual( c, 4 );
		AssertEqual( pm.find( 3 ), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
	{	
		std::set<int>::reverse_iterator		i;
		std::set<int>::const_reverse_iterator	j, k;
		unsigned				c;

		for ( i = pm.rbegin(), c = 0; i != pm.rend(); ++i, ++c ) {
			if ( c == 2 ) k = std::set<int>::reverse_iterator( i );
			if ( c == 3 ) {
				AssertNotEqual( i, pm.rend());


				j = i;
			}
		}
		AssertEqual( i, pm.rend());
		AssertEqual( c, 4 );
		AssertEqual( static_cast<std::set<int>::const_reverse_iterator>( pm.find( 2 )), j );
		AssertTrue( k != j );
		AssertTrue( ++k == j );
	}
}

// -----------------------------------------------------------------------------
void dp_settest::test25()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - reference pointer(pointer) value" );

	dr_set<test*>      r1;
	dr_set<test*>      r2 = { &t1, &t2, &t3, &t5 };
	dr_set<test*>      r3 = { &t4, &t5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { &t1, &t2, &t3, &t5 } ));
	AssertTrue( check_set( r2, { &t4, &t5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( &t1 ), 1 );
	AssertEqual( r1.count( &t3 ), 1 );
	AssertEqual( r1.count( &t4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test26()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - deep pointer(pointer) value" );

	dp_set<test*>      r1;
	dp_set<test*>      r2 = { &t1, &t2, &t3, &t5 };
	dp_set<test*>      r3 = { &t4, &t5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { &t1, &t2, &t3, &t5 } ));
	AssertTrue( check_set( r2, { &t4, &t5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( &t1 ), 1 );
	AssertEqual( r1.count( &t3 ), 1 );
	AssertEqual( r1.count( &t4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test27()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - reference pointer(c-string) value" );

	dr_set<const char[]>      r1;
	dr_set<const char[]>      r2 = { s1, s2, s3, s5 };
	dr_set<const char[]>      r3 = { s4, s5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { s1, s2, s3, s5 } ));
	AssertTrue( check_set( r2, { s4, s5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( s1 ), 1 );
	AssertEqual( r1.count( s3 ), 1 );
	AssertEqual( r1.count( s4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test28()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - deep pointer(c-string) value" );

	dp_set<const char[]>      r1;
	dp_set<const char[]>      r2 = { s1, s2, s3, s5 };
	dp_set<const char[]>      r3 = { s4, s5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { s1, s2, s3, s5 } ));
	AssertTrue( check_set( r2, { s4, s5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( s1 ), 1 );
	AssertEqual( r1.count( s3 ), 1 );
	AssertEqual( r1.count( s4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test29()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - reference pointer(v-array) value" );

	dr_set<test[]>      r1;
	dr_set<test[]>      r2 = { v1, v2, v3, v5 };
	dr_set<test[]>      r3 = { v4, v5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { v1, v2, v3, v5 } ));
	AssertTrue( check_set( r2, { v4, v5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( v1 ), 1 );
	AssertEqual( r1.count( v3 ), 1 );
	AssertEqual( r1.count( v4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test2A()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - deep pointer(v-array) value" );

	dp_set<test[]>      r1;
	dp_set<test[]>      r2 = { v1, v2, v3, v5 };
	dp_set<test[]>      r3 = { v4, v5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { v1, v2, v3, v5 } ));
	AssertTrue( check_set( r2, { v4, v5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( v1 ), 1 );
	AssertEqual( r1.count( v3 ), 1 );
	AssertEqual( r1.count( v4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test2B()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - reference pointer(f-array) value" );

	dr_set<test[3]>      r1;
	dr_set<test[3]>      r2 = { w1, w2, w3, w5 };
	dr_set<test[3]>      r3 = { w4, w5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { w1, w2, w3, w5 } ));
	AssertTrue( check_set( r2, { w4, w5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( w1 ), 1 );
	AssertEqual( r1.count( w3 ), 1 );
	AssertEqual( r1.count( w4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test2C()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - deep pointer(f-array) value" );

	dp_set<test[3]>      r1;
	dp_set<test[3]>      r2 = { w1, w2, w3, w5 };
	dp_set<test[3]>      r3 = { w4, w5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { w1, w2, w3, w5 } ));
	AssertTrue( check_set( r2, { w4, w5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( w1 ), 1 );
	AssertEqual( r1.count( w3 ), 1 );
	AssertEqual( r1.count( w4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test2D()
{
	this->set_subtitle( "miscellaneous (swap/count/size/empty/clear) - data(int value) value" );

	std::set<int>      r1;
	std::set<int>      r2 = { 1, 2, 3, 5 };
	std::set<int>      r3 = { 4, 5 };

	// swap
	r1.swap( r2 );
	r2.swap( r3 );
	AssertTrue( check_set( r1, { 1, 2, 3, 5 } ));
	AssertTrue( check_set( r2, { 4, 5 } ));
	AssertTrue( check_set( r3, { } ));

	// size, count
	AssertEqual( r1.size(), 4 );
	AssertEqual( r1.count( 1 ), 1 );
	AssertEqual( r1.count( 3 ), 1 );
	AssertEqual( r1.count( 4 ), 0 );

	// empty, clear
	AssertFalse( r1.empty());
	r1.clear();
	AssertTrue( r1.empty());
	AssertTrue( check_set( r1, { } ));
}

// -----------------------------------------------------------------------------
void dp_settest::test2E()
{
	this->set_subtitle( "relational operators - reference pointer(pointer) value" );

	dr_set<test*>      r1 = { &t1, &t2 };
	dr_set<test*>      r2 = { &t1, &t2, &t3, &t5 };
	dr_set<test*>      r3 = { &t1, &t3, &t2 };
	dr_set<test*>      r4 = { &t1, &t2, &t3, &t5 };
	dr_set<test*>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test2F()
{
	this->set_subtitle( "relational operators - deep pointer(pointer) value" );

	dp_set<test*>      r1 = { &t1, &t2 };
	dp_set<test*>      r2 = { &t1, &t2, &t3, &t5 };
	dp_set<test*>      r3 = { &t1, &t3, &t2 };
	dp_set<test*>      r4 = { &t1, &t2, &t3, &t5 };
	dp_set<test*>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test30()
{
	this->set_subtitle( "relational operators - reference pointer(c-string) value" );

	dr_set<const char[]>      r1 = { s1, s2 };
	dr_set<const char[]>      r2 = { s1, s2, s3, s5 };
	dr_set<const char[]>      r3 = { s1, s3, s2 };
	dr_set<const char[]>      r4 = { s1, s2, s3, s5 };
	dr_set<const char[]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test31()
{
	this->set_subtitle( "relational operators - deep pointer(c-string) value" );

	dp_set<const char[]>      r1 = { s1, s2 };
	dp_set<const char[]>      r2 = { s1, s2, s3, s5 };
	dp_set<const char[]>      r3 = { s1, s3, s2 };
	dp_set<const char[]>      r4 = { s1, s2, s3, s5 };
	dp_set<const char[]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test32()
{
	this->set_subtitle( "relational operators - reference pointer(v-array) value" );

	dr_set<test[]>      r1 = { v1, v2 };
	dr_set<test[]>      r2 = { v1, v2, v3, v5 };
	dr_set<test[]>      r3 = { v1, v3, v2 };
	dr_set<test[]>      r4 = { v1, v2, v3, v5 };
	dr_set<test[]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test33()
{
	this->set_subtitle( "relational operators - deep pointer(v-array) value" );

	dp_set<test[]>      r1 = { v1, v2 };
	dp_set<test[]>      r2 = { v1, v2, v3, v5 };
	dp_set<test[]>      r3 = { v1, v3, v2 };
	dp_set<test[]>      r4 = { v1, v2, v3, v5 };
	dp_set<test[]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test34()
{
	this->set_subtitle( "relational operators - reference pointer(f-array) value" );

	dr_set<test[3]>      r1 = { w1, w2 };
	dr_set<test[3]>      r2 = { w1, w2, w3, w5 };
	dr_set<test[3]>      r3 = { w1, w3, w2 };
	dr_set<test[3]>      r4 = { w1, w2, w3, w5 };
	dr_set<test[3]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test35()
{
	this->set_subtitle( "relational operators - deep pointer(f-array) value" );

	dp_set<test[3]>      r1 = { w1, w2 };
	dp_set<test[3]>      r2 = { w1, w2, w3, w5 };
	dp_set<test[3]>      r3 = { w1, w3, w2 };
	dp_set<test[3]>      r4 = { w1, w2, w3, w5 };
	dp_set<test[3]>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// -----------------------------------------------------------------------------
void dp_settest::test36()
{
	this->set_subtitle( "relational operators - data(int value) value" );

	std::set<int>      r1 = { 1, 2 };
	std::set<int>      r2 = { 1, 2, 3, 5 };
	std::set<int>      r3 = { 1, 3, 2 };
	std::set<int>      r4 = { 1, 2, 3, 5 };
	std::set<int>      r5;

	AssertTrue( r1 < r2 );
	AssertTrue( r2 > r3 );
	AssertTrue( r2 == r4 );
	AssertFalse( r5 >= r1 );
	AssertFalse( r2 > r4 );
	AssertTrue( r1 != r4 );
	AssertTrue( r1 <= r4 );
}

// Main
// -----------------------------------------------------------------------------
int main( int argc, char** argv )
{
	dp_settest( argc, argv ).run();
	return 0;
}
