$X${
// Testdata Check Utilities
// -----------------------------------------------------------------------------
template <typename T>
inline bool check_deque( dp_deque<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	rp_deque<T>	l;

	for ( auto&& a : ts ) l.push_back( a );

	return ls == reinterpret_cast<dp_deque<T> const&>( l );
}

template <typename T>
inline bool check_deque( rp_deque<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	rp_deque<T>	l;

	for ( auto&& a : ts ) l.push_back( a );

	return ls == l;
}

template <typename T>
inline bool check_deque( std::deque<T> const& ls, std::initializer_list<typename value_p<T>::t> const& ts )
{
	std::deque<T>	l;

	for ( auto&& a : ts ) l.push_back( a );

	return ls == l;
}
$}

$V "constructor/assignment/destructor"
${
	// default constructor
	$a		lr;
	AssertTrue( check_deque( lr, { } ));

	// copy constructor
	$a		p0( lr );
	const $a	c0( lr );
	lr.push_back( $d$1 );
	$a		p1( lr );
	const $a	c1( lr );
	lr.push_back( $d$2 );
	lr.push_back( $d$3 );
	lr.push_back( $d$4 );
	lr.push_back( $d$5 );
	$a		p5( lr );
	const $a	c5( lr );

	AssertTrue( p0.empty());
	AssertTrue( check_deque( p1, { $1 } ));
	AssertTrue( check_deque( p5, { $1, $2, $3, $4, $5 } ));
	AssertTrue( c0.empty());
	AssertTrue( check_deque( c1, { $1 } ));
	AssertTrue( check_deque( c5, { $1, $2, $3, $4, $5 } ));

	fprintf( stderr, "--- move constructor ---\n" );
	{
		$a	lx = lr;
		$a	ly( std::move( lx ));

		AssertTrue( lx.empty());
		AssertTrue( check_deque( ly, { $1, $2, $3, $4, $5 } ));
	}
	fprintf( stderr, "--- copy assignment operator ---\n" );
	{
		$a	lx;

		lx = p1;
		AssertTrue( check_deque( lx, { $1 } ));
		lx = p0;
		AssertTrue( lx.empty());
		lx = p5;
		AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
	}
	fprintf( stderr, "--- move assignment operator ---\n" );
	{
		$a	lx;

		lr = p1;
		lx = $a( { $5, $3, $2 } );				// move assignment by r-value
		AssertTrue( check_deque( lx, { $5, $3, $2 } ));

		lx = std::move( lr );					// move assignment by std::move()
		AssertTrue( check_deque( lx, { $1 } ));
		AssertTrue( check_deque( lr, {} ));			// not mandatory

		//lx = std::move( lx );
		//AssertTrue( check_deque( lx, { $1 } ));		// Opps! problem of std::deque impl.
	}
	fprintf( stderr, "--- iterator constructor ---\n" );
	{
		$a	lx = p5;

		$a	x3( lx.begin(), lx.begin() += 3 );
		AssertTrue( check_deque( x3, { $1, $2, $3 } ));
		$a	x0( lx.begin() += 2, lx.begin() += 2 );
		AssertTrue( x0.empty());
		$a	x1( lx.begin() += 4, lx.end());
		AssertTrue( check_deque( x1, { $5 } ));
	}
	fprintf( stderr, "--- fill constructor ---\n" );
	{
		$a	x0( 3 );
		AssertTrue( check_deque( x0, { $n, $n, $n } ));
		$a	x1( 2, $n );
		AssertTrue( check_deque( x1, { $n, $n } ));
		$a	x2( 4, $3 );
		AssertTrue( check_deque( x2, { $3, $3, $3, $3 } ));
	}
	fprintf( stderr, "--- initializer constructor/assignment operator ---\n" );
	{
		$a	lx = p5;
		$a	x0 { };
		$a	x1 { $1 };
		$a	x5 { $1, $2, $3, $4, $5 };

		AssertTrue( x0.empty());
		AssertTrue( check_deque( x1, { $1 } ));
		AssertTrue( check_deque( x5, { $1, $2, $3, $4, $5 } ));

		lx = { };
		AssertTrue( lx.empty());
		lx = { $1 };
		AssertTrue( check_deque( lx, { $1 } ));
		lx = { $1, $2, $3, $4, $5 };
		AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
	}
$}

$V "stack/queue operations"
${	
	fprintf( stderr, "--- copy-push ---\n" );
	{
		$a	lp;

		lp.push_back( static_cast<$t const&>( $3 ));
		lp.push_front( static_cast<$t const&>( $2 ));
		lp.push_front( static_cast<$t const&>( $1 ));

		AssertTrue( check_deque( lp, { $1, $2, $3 } ));

		lp.push_back( static_cast<$t const&>( $4 ));
		lp.push_front( static_cast<$t const&>( $0 ));
		lp.pop_front();
		lp.push_back( static_cast<$t const&>( $5 ));
		lp.push_back( static_cast<$t const&>( $6 ));
		lp.pop_back();

		AssertTrue( check_deque( lp, { $1, $2, $3, $4, $5 } ));
	}
	fprintf( stderr, "--- move-push ---\n" );
	{
		$a	lp;

		lp.push_back( $d$3 );
		lp.push_front( $d$2 );
		lp.push_front( $d$1 );

		AssertTrue( check_deque( lp, { $1, $2, $3 } ));

		lp.push_back( $d$4 );
		lp.push_front( $d$0 );
		lp.pop_front();
		lp.push_back( $d$5 );
		lp.push_back( $d$6 );
		lp.pop_back();

		AssertTrue( check_deque( lp, { $1, $2, $3, $4, $5 } ));
	}
$}

$V "list operations (modifier)"
${	{
		$a	lp = { $1, $2, $3, $4, $5 };
		$a	l0;

		fprintf( stderr, "--- assign ---\n" );
		{
			$a	lx;

			lx.assign( 3, $n );
			AssertTrue( check_deque( lx, { $n, $n, $n } ));
			lx.assign( 7, $4 );
			AssertTrue( check_deque( lx, { $4, $4, $4, $4, $4, $4, $4 } ));
			lx.assign(( lp.begin() += 2 ), lp.end());
			AssertTrue( check_deque( lx, { $3, $4, $5 } ));
			lx.assign( { $1, $2, $3, $4, $5 } );
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
		}
		fprintf( stderr, "--- insert ---\n" );
		{
			$a		lx = { $2, $3, $5 };
			$a::iterator	r;

			// single element (copy)
			r = lx.insert( lx.begin(), static_cast<$t const&>( $1 ));
			AssertTrue( check_deque( lx, { $1, $2, $3, $5 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin() + 3, static_cast<$t const&>( $4 ));
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin() + 3 );
			r = lx.insert( lx.end(), static_cast<$t const&>( $6 ));
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5, $6 } ));
			AssertTrue( r == lx.begin() + 5 );

			// single element (move)
			lx = { $2, $3, $5 };
			r = lx.insert( lx.begin(), $d$1 );
			AssertTrue( check_deque( lx, { $1, $2, $3, $5 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin() + 3, $d$4 );
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin() + 3 );
			r = lx.insert( lx.end(), $d$6 );
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5, $6 } ));
			AssertTrue( r == lx.begin() + 5 );

			// initializer list
			r = lx.insert( lx.begin(), { $1, $2, $0 } );
			AssertTrue( check_deque( lx, { $1, $2, $0, $1, $2, $3, $4, $5, $6 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin() += 7, { $2, $0 } );
			AssertTrue( check_deque( lx, { $1, $2, $0, $1, $2, $3, $4, $2, $0, $5, $6 } ));
			AssertTrue( r == lx.begin() + 7 );
			r = lx.insert( lx.begin() += 5, { } );
			AssertTrue( check_deque( lx, { $1, $2, $0, $1, $2, $3, $4, $2, $0, $5, $6 } ));
			AssertTrue( r == lx.begin() + 5 );
			r = lx.insert( lx.end(), { $3, $5, $0 } );
			AssertTrue( check_deque( lx, { $1, $2, $0, $1, $2, $3, $4, $2, $0, $5, $6, $3, $5, $0 } ));
			AssertTrue( r == lx.begin() + 11 );

			// range
			lx.clear();
			r = lx.insert( lx.begin(), lp.begin(), lp.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin(), l0.begin(), l0.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin() + 3, l0.begin(), l0.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin() + 3 );
			r = lx.insert( lx.end(), l0.begin(), l0.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin() + 5 );
			r = lx.insert( lx.begin(), lp.begin(), ( lp.begin() += 2 ));
			AssertTrue( check_deque( lx, { $1, $2, $1, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin() + 3, ( lp.begin() += 1 ), ( lp.begin() += 4 ));
			AssertTrue( check_deque( lx, { $1, $2, $1, $2, $3, $4, $2, $3, $4, $5 } ));
			AssertTrue( r == lx.begin() + 3 );
			r = lx.insert( lx.end(), ( lp.begin() += 3 ), lp.end());
			AssertTrue( check_deque( lx, { $1, $2, $1, $2, $3, $4, $2, $3, $4, $5, $4, $5 } ));
			AssertTrue( r == lx.begin() + 10 );

			// range (self insertion)
			lx.clear();
			r = lx.insert( lx.begin(), lx.begin(), lx.end());
			AssertTrue( lx.empty());
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.end(), lx.begin(), lx.end());
			AssertTrue( lx.empty());
			AssertTrue( r == lx.begin());
			lx = { $1, $2, $3 };
			r = lx.insert( lx.begin(), lx.begin(), lx.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $1, $2, $3 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.end(), lx.begin(), lx.end());
			AssertTrue( check_deque( lx, { $1, $2, $3, $1, $2, $3, $1, $2, $3, $1, $2, $3 } ));
			AssertTrue( r == lx.begin() + 6 );

			// fill
			lx.clear();
			r = lx.insert( lx.begin(), 3, $1 );
			AssertTrue( check_deque( lx, { $1, $1, $1 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.begin(), 2, $2 );
			AssertTrue( check_deque( lx, { $2, $2, $1, $1, $1 } ));
			AssertTrue( r == lx.begin());
			r = lx.insert( lx.end(), 2, $3 );
			AssertTrue( check_deque( lx, { $2, $2, $1, $1, $1, $3, $3 } ));
			AssertTrue( r == lx.begin() + 5 );
			r = lx.insert( lx.begin() + 2, 0, $4 );
			AssertTrue( check_deque( lx, { $2, $2, $1, $1, $1, $3, $3 } ));
			AssertTrue( r == lx.begin() + 2 );
			r = lx.insert( lx.begin() + 4, 3, $5 );
			AssertTrue( check_deque( lx, { $2, $2, $1, $1, $5, $5, $5, $1, $3, $3 } ));
			AssertTrue( r == lx.begin() + 4 );
		}

		fprintf( stderr, "--- erase ---\n" );
		{
			$a		lx;
			$a::iterator	r;

			lx = lp;
			r = lx.erase( lx.begin() + 1, lx.begin() + 3 );
			AssertTrue( check_deque( lx, { $1, $4, $5 } ));
			AssertTrue( r == lx.begin() + 1 );
			r = lx.erase( lx.begin() + 1 );
			AssertTrue( check_deque( lx, { $1, $5 } ));
			AssertTrue( r == lx.begin() + 1 );
			r = lx.erase( lx.begin(), lx.begin() + 1 );
			AssertTrue( check_deque( lx, { $5 } ));
			AssertTrue( r == lx.begin() );
			lx = lp;
			r = lx.erase( lx.begin() + 3, lx.begin() + 5 );
			AssertTrue( check_deque( lx, { $1, $2, $3 } ));
			AssertTrue( r == lx.end() );
		}
	}
$}

$V "list operations (accessor)"
${	{
		fprintf( stderr, "--- at/operator[] ---\n" );
		{
			$a		lp = { $1, $2, $3, $4, $5 };
			$a const&	cp = lp;

$T${			AssertEqual( *lp[ 0 ], t1 );
			AssertEqual( *lp.at( 1 ), t2 );
			AssertEqual( lp.at( 2 )->num(), 3 );
			AssertEqual( lp[ 3 ]->num(), 4 );
			AssertZero( strcmp( lp[ 4 ]->cstr(), s5 ));$}$&
$Z${			AssertZero( strcmp( lp[ 0 ], $1 ));
			AssertZero( strcmp( lp.at( 2 ), $3 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( lp[ 0 ], $1 ));
			AssertTrue( dp_eql<$v>()( lp.at( 2 ), $3 ));$}

$T${			AssertEqual( *cp[ 0 ], t1 );
			AssertEqual( *cp.at( 1 ), t2 );
			AssertEqual( cp.at( 2 )->num(), 3 );
			AssertEqual( cp[ 3 ]->num(), 4 );
			AssertZero( strcmp( cp[ 4 ]->cstr(), s5 ));$}$&
$Z${			AssertZero( strcmp( cp[ 0 ], $1 ));
			AssertZero( strcmp( cp.at( 2 ), $3 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( cp[ 0 ], $1 ));
			AssertTrue( dp_eql<$v>()( cp.at( 2 ), $3 ));$}

			lp[ 1 ] = $d$4;
			AssertTrue( check_deque( lp, { $1, $4, $3, $4, $5 } ));
			lp[ 3 ] = lp[ 2 ];					
			AssertTrue( check_deque( lp, { $1, $4, $3, $3, $5 } ));
$T${
			test	bk = *lp[ 2 ];
			*lp[ 2 ] = t7;
$R${			AssertTrue( check_deque( lp, { $1, $4, $7, $7, $5 } ));	// different result by d-ptr$}$&
$D${			AssertTrue( check_deque( lp, { $1, $4, $7, $3, $5 } ));	// different result by stl$}
			*lp[ 2 ] = bk;
$}
			try {
				AssertEqual( lp.at( 5 ), $0 );
			}
			catch ( typename std::exception& e ) {
				fprintf( stderr, "*** exception: %s\n", e.what() );
			}
		}
		fprintf( stderr, "--- front/back ---\n" );
		{
			$a		lp;
			$a const&	cp = lp;

			lp = { $1, $2, $3, $1, $4, $5 };
			AssertTrue( static_cast<bool>( lp.front() ));
$R${			AssertEqual( static_cast<$t>( lp.front()), $1 );$}$&
$D${			AssertNotEqual( static_cast<$t>( lp.front()), $1 );$}
$T${			AssertEqual( *lp.front(), t1 );
			AssertEqual( lp.front()->num(), 1 );$}$&
$Z${			AssertZero( strcmp( lp.front(), $1 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( lp.front(), $1 ));$}
$T${
			test	bk = *lp.front();
			*lp.front() = t7;
$R${			AssertTrue( check_deque( lp, { $7, $2, $3, $7, $4, $5 } ));$}$&
$D${			AssertTrue( check_deque( lp, { $7, $2, $3, $1, $4, $5 } ));$}
			*lp.front() = bk;
$}
			AssertTrue( static_cast<bool>( lp.back() ));
$R${			AssertEqual( static_cast<$t>( lp.back()), $5 );$}$&
$D${			AssertNotEqual( static_cast<$t>( lp.back()), $5 );$}
$T${			AssertEqual( *lp.back(), t5 );
			AssertEqual( lp.back()->num(), 5 );$}$&
$Z${			AssertZero( strcmp( lp.back(), $5 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( lp.back(), $5 ));$}

			AssertTrue( static_cast<bool>( cp.front() ));
$R${			AssertEqual( static_cast<$c>( cp.front()), $1 );$}$&
$D${			AssertNotEqual( static_cast<$c>( cp.front()), $1 );$}
$T${			AssertEqual( *cp.front(), t1 );
			AssertEqual( cp.front()->num(), 1 );$}$&
$Z${			AssertZero( strcmp( cp.front(), $1 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( cp.front(), $1 ));$}

			AssertTrue( static_cast<bool>( cp.back() ));
$R${			AssertEqual( static_cast<$c>( cp.back()), $5 );$}$&
$D${			AssertNotEqual( static_cast<$c>( cp.back()), $5 );$}
$T${			AssertEqual( *cp.back(), t5 );
			AssertEqual( cp.back()->num(), 5 );$}$&
$Z${			AssertZero( strcmp( cp.back(), $5 ));$}$&
$A$F${			AssertTrue( dp_eql<$v>()( cp.back(), $5 ));$}

			lp.back() = lp.front();			
$R${			AssertEqual( static_cast<$t>( lp.back()), $1 );	// the first and the last both refer $1$}$&
$D${			AssertNotEqual( static_cast<$t>( lp.back()), $1 );	// $1 will be copy assigned$}
			AssertTrue( check_deque( lp, { $1, $2, $3, $1, $4, $1 } ));
		}

$T${		fprintf( stderr, "--- returned reference\n" );
		{
			$i<test*>		nn { $1, $2, $3, $4, $n, $5 };
			$i<const test*>		cn { $1, $2, $3, $4, $n, $5 };

$R${			AssertEqual( nn[ 1 ], $2 );				// adresss comparison
			AssertEqual( cn[ 1 ], $2 );$}$&				//
$D${			AssertNotEqual( nn[ 1 ], $2 );				// adresss comparison
			AssertNotEqual( cn[ 1 ], $2 );$}			//
			AssertEqual( *nn[ 1 ], t2 );
			AssertEqual( *cn[ 1 ], t2 );
			AssertEqual( nn[ 1 ]->num(), 2 );
			AssertEqual( cn[ 1 ]->num(), 2 );
			nn[ 1 ] = $d$7;
			cn[ 1 ] = $d$7;
			AssertTrue( check_deque( nn, { $1, $7, $3, $4, $n, $5 } ));
			AssertTrue( check_deque( cn, { $1, $7, $3, $4, $n, $5 } ));

			AssertTrue( nn[ 2 ] = nn[ 0 ] );
			//AssertTrue( nn[ 3 ] = cn[ 0 ] );			// compile error
			AssertTrue( check_deque( nn, { $1, $7, $1, $4, $n, $5 } ));
			AssertTrue( cn[ 2 ] = nn[ 5 ] );
			AssertTrue( cn[ 3 ] = cn[ 5 ] );
			AssertTrue( check_deque( cn, { $1, $7, $5, $5, $n, $5 } ));
		}
$}
	}
$}

$V "iterator"
${
	fprintf( stderr, "--- iterator ---\n" );
	{
		$a		lr;
		$a::iterator	e, i, j;
		unsigned			n;

		for ( i = lr.begin(), n = 0; i != lr.end(); ++i, ++n ) println( *i );
		AssertZero( n );

		lr = { $1, $2, $3, $4, $5 };
		for ( i = lr.begin(), n = 0; i != lr.end(); ++i, ++n ) println( *i );
		AssertEqual( n, 5 );

		i = lr.begin();
		e = lr.end();
		j = i + 2;
		while ( i != e ) {
			if ( i == j ) *i = $d$7;
			println( *i );
			++i;
		}
		AssertTrue( check_deque( lr, { $1, $2, $7, $4, $5 } ));

		for ( $t const& p : lr ) println( p );
	}
	fprintf( stderr, "--- const_iterator ---\n" );
	{
		const $a		lr = { $1, $2, $3, $4, $5 };
		unsigned			n = 0;

		for ( auto i = lr.begin(); i != lr.end(); ++i, ++n ) println( *i );
		AssertEqual( n, 5 );

$T${		AssertEqual( **( lr.begin() += 3 ), t4 );$}$&
$Z${		AssertZero( strcmp( *( lr.begin() += 3 ), $4 ));$}$&
$A$F${		AssertTrue( dp_eql<$v>()( *( lr.begin() += 3 ), $4 ));$}

		n = 0;
$T${		for ( auto i = lr.begin(); i != lr.end(); ++i ) { n += ( *i )->num(); }
		AssertEqual( n, 15 );$}$&
$Z${		for ( auto i = lr.begin(); i != lr.end(); ++i ) { n += strlen( *i ); }
		AssertEqual( n, 30 );$}$&
$A$F${		for ( auto i = lr.begin(); i != lr.end(); ++i ) { n += ( *i )[ 0 ].num(); }
		AssertEqual( n, 15 );$}

		for ( $c const& p : lr ) println( p );
	}
$}

$V "list operations (miscellaneous)"
${
	$a	r0;
	$a	r1 = { $1 };
	$a	r5 = { $1, $2, $3, $4, $5 };

	fprintf( stderr, "--- empty() ---\n" );
	AssertTrue( r0.empty());
	AssertFalse( r1.empty());
	AssertFalse( r5.empty());

	fprintf( stderr, "--- size() ---\n" );
	AssertEqual( r0.size(), 0 );
	AssertEqual( r1.size(), 1 );
	AssertEqual( r5.size(), 5 );

	fprintf( stderr, "--- resize() ---\n" );
	{
		$a  l5 = r5;
		l5.resize( 3 );
		AssertTrue( check_deque( l5, { $1, $2, $3 } ));
		$a  l1 = r1;
		l1.resize( 3 );
		AssertTrue( check_deque( l1, { $1, $n, $n } ));
		$a  l0 = r0;
		l0.resize( 3 );
		AssertTrue( check_deque( l0, { $n, $n, $n } ));
	}

	fprintf( stderr, "--- swap, clear ---\n" );
	{
		$a	  lx;
		$a	  ly;

		lx.swap( ly );
		AssertTrue( lx.empty());
		AssertTrue( ly.empty());
		lx = r5;
		lx.swap( ly );
		AssertTrue( lx.empty());
		AssertTrue( check_deque( ly, { $1, $2, $3, $4, $5 } ));
		lx.swap( ly );
		AssertTrue( check_deque( lx, { $1, $2, $3, $4, $5 } ));
		AssertTrue( ly.empty());

		lx = r5;
		lx.clear();
		AssertTrue( lx.empty());
		lx.clear();
		AssertTrue( lx.empty());
	}
$}

$V "relational operators"
${
	$a	l0;
	$a	l1 = { $1, $2, $3 };
	$a	l2 = { $1, $2, $3, $n };
	$a	l3 = { $1, $2, $3, $4 };
	$a	l4 = { $1, $2, $4 };

	$a	l  = { $1, $2, $3 };


	fprintf( stderr, "--- equality ---\n" );
	AssertTrue( l != l0 );
	AssertTrue( l == l1 );
	AssertTrue( l != l2 );
	
	fprintf( stderr, "--- comparison ---\n" );
	AssertFalse( l < l0 );
	AssertTrue( l == l1 );
	AssertTrue( l <= l1 );
	AssertTrue( l < l2 );
	AssertTrue( l < l3 );
	AssertTrue( l > l0 );
	AssertTrue( l >= l1 );
	AssertFalse( l >= l2 );
	AssertFalse( l > l3 );
$}

$V "list duplication"
${
	$a	l;
	$a*	p;
	
	p = dpl( &l );
	AssertTrue( p->empty());
	delete p;
	
	l.push_back( $d$1 );
	p = dpl( &l );
	AssertTrue( check_deque( *p, { $1 } ));
	delete p;
	
	l.push_back( $d$2 );
	l.push_back( $d$3 );
	l.push_back( $n );
	l.push_back( $d$4 );
	l.push_back( $d$5 );
	p = dpl( &l );
	AssertTrue( check_deque( *p, { $1, $2, $3, $n, $4, $5 } ));
	delete p;
$}

$U "heterogenious list"
${
	dp_deque<base*>	l = { &t1, &u2, &i3, &u4, &t5, &t6, &i7 };

	print( l );
	AssertEqual( 7, l.size());
$}

$U "temporal"
${
	dp_deque<test*>	n;
	dp_deque<test*> l = { &t1, &t2, &t3 };

	n = l;

	print( n );
$}

